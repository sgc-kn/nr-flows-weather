[
    {
        "id": "7873bcdda0fd36a9",
        "type": "tab",
        "label": "ETO Wetterstationen (NGSI-LD)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3636968d85524595",
        "type": "tab",
        "label": "Wettermanufaktur API (NGSI-LD)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "39d92afff0d156f4",
        "type": "tab",
        "label": "DKAN Anbindung v2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "06d7c31d0c65ced0",
        "type": "tab",
        "label": "Stellio Helpers",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ebc0db16fd47daa1",
        "type": "tab",
        "label": "Environment",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4b7e30d0ef4fb504",
        "type": "group",
        "z": "7873bcdda0fd36a9",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5597e41fb9f06182",
            "986772cca4233155",
            "7a45a2ea06bdc9bf",
            "141f9ef98146e219",
            "dbaf850120acd827",
            "dc143f85a82dc0a9",
            "d029aa45b83d4c64",
            "f9ea02d8618e3f81"
        ],
        "x": 88,
        "y": 33,
        "w": 1204,
        "h": 1014
    },
    {
        "id": "19edac2a759365c2",
        "type": "group",
        "z": "3636968d85524595",
        "name": "Get access token",
        "style": {
            "label": true
        },
        "nodes": [
            "f124085a041a7fc6",
            "e035e692fef3f2e3",
            "af3abc32000a8a7b",
            "bdc50fddc9a35863",
            "4d4a1e78e7d46815"
        ],
        "x": 24,
        "y": 39,
        "w": 862,
        "h": 162
    },
    {
        "id": "3a7b93f1b0514cf9",
        "type": "group",
        "z": "3636968d85524595",
        "name": "Beobachtungen",
        "style": {
            "label": true
        },
        "nodes": [
            "2d90eca95a758d4a",
            "eaa3e91bbb9c6af6"
        ],
        "x": 28,
        "y": 247,
        "w": 990,
        "h": 620
    },
    {
        "id": "598fbaded8837b3a",
        "type": "group",
        "z": "3636968d85524595",
        "name": "Vorhersagen",
        "style": {
            "label": true
        },
        "nodes": [
            "9cf769a0de6323b5",
            "4572ae7826f8a221",
            "5ab2ad979e608b78"
        ],
        "x": 1018,
        "y": 247,
        "w": 1048,
        "h": 600
    },
    {
        "id": "272f900e4c2441df",
        "type": "group",
        "z": "39d92afff0d156f4",
        "name": "Resource creation and file upload",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "8c9568258bc6180e",
            "5be4a91598375230",
            "eefd22bc44c80ee2",
            "fed908411b43dc9f",
            "fbdadf5f291a154e",
            "8062212ff0650a6f",
            "ad7c2d7e8d9a90b0",
            "2424113be0f26e5a",
            "4cf8264182af04cd",
            "846827593ee02b82",
            "bfbbee17f7ae8f9e",
            "70e63a46e5c1e1f0",
            "7dadd2741773197e",
            "134db8b52c313c9c",
            "55c85cd132f15ec2",
            "e0135b6350146933",
            "0a470830db50cb31",
            "3839d35226b92f3a",
            "60a08e98832f9b46",
            "9c616b9bcdec7250",
            "d28bf120ba445bd4",
            "8a363fc10cf07bf5",
            "4b01f3b4899e1683",
            "1cd60c1b1f0a4fa8",
            "9fad9743e67e5799",
            "e04610e11257ccc9",
            "9563299cf89fd6bb",
            "7735666b8a6611f5",
            "4f74ad5e5977306f",
            "6b72bc271962b49d",
            "b28fd93e72eb1b58",
            "f1444af0b1e65b61"
        ],
        "x": 34,
        "y": 599,
        "w": 2144,
        "h": 1722
    },
    {
        "id": "e1f0eda674902441",
        "type": "group",
        "z": "39d92afff0d156f4",
        "name": "Authentication",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "b053a2ae4f2aba89",
            "b712a8664b429c4e",
            "23562a97683f4fc7",
            "9fe4aa23d62f409b"
        ],
        "x": 48,
        "y": 159,
        "w": 1364,
        "h": 348
    },
    {
        "id": "446108a4de4fe5df",
        "type": "group",
        "z": "39d92afff0d156f4",
        "name": "Create Dataset (once per year)",
        "style": {
            "label": true,
            "fill": "#ffbfbf",
            "color": "#000000"
        },
        "nodes": [
            "4db2ab95b20f8131",
            "9cc12486380112b6",
            "fcd6d97fb29443f2",
            "8b83f397fbcba82f",
            "b383b941f77f0ae0",
            "7bcc31bc8ad9e280"
        ],
        "x": 54,
        "y": 39,
        "w": 1332,
        "h": 82
    },
    {
        "id": "4b9d98d3b233bad0",
        "type": "group",
        "z": "06d7c31d0c65ced0",
        "name": "Create Subscription for weatherforecast",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000",
            "stroke": "#addb7b"
        },
        "nodes": [
            "85ceb161e5d0d4db",
            "5252da0a3b5d24ab",
            "9c3b76bdae064a99",
            "bc15c0467419ddd9",
            "e8a07ecd024d5822",
            "e4c1c432b5a7bde4",
            "1a88500f8db47aea",
            "edcc142ca7eb9afc",
            "35222a2ef962eb31",
            "e03162aa717f31b7"
        ],
        "x": 34,
        "y": 39,
        "w": 1252,
        "h": 242
    },
    {
        "id": "55f07cfc0580dabd",
        "type": "group",
        "z": "06d7c31d0c65ced0",
        "name": "Delete Subscription NGSI-LD",
        "style": {
            "fill": "#ff7f7f",
            "label": true,
            "stroke": "#ff0000",
            "color": "#000000"
        },
        "nodes": [
            "29432c5f74f85fdf",
            "18acf3481670be07",
            "c4880210854be9fe",
            "7e4e4fbd76f11f99"
        ],
        "x": 34,
        "y": 419,
        "w": 812,
        "h": 82
    },
    {
        "id": "9bb62de76d856a4d",
        "type": "group",
        "z": "06d7c31d0c65ced0",
        "name": "Get Subscriptions",
        "style": {
            "stroke": "#ffefbf",
            "fill": "#ffff7f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "2e36820119375021",
            "080ab472d262251c",
            "c75e48673f6853fc",
            "bdc544139ebcbdf3"
        ],
        "x": 34,
        "y": 299,
        "w": 872,
        "h": 82
    },
    {
        "id": "9e2364239da5e46f",
        "type": "group",
        "z": "06d7c31d0c65ced0",
        "name": "Create Subscription for weatherobserved",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000",
            "stroke": "#addb7b"
        },
        "nodes": [
            "50f6c90273d64dec",
            "9e13e3cb6787596e",
            "af2b75ee75418e36",
            "efc1dbde7ca33800",
            "2a90adb0c7c87f69",
            "bc522295a33c44e8",
            "e22b47130cab0aff",
            "922ae5c915dbfef5",
            "dd05473a52b6b668",
            "c345fc4b7d75c548"
        ],
        "x": 34,
        "y": 539,
        "w": 1252,
        "h": 242
    },
    {
        "id": "086535801c0646b6",
        "type": "group",
        "z": "39d92afff0d156f4",
        "name": "Resource creation and file upload HISTORIC DATA",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "b5c95d5e7650c05c",
            "0a4889120da9b102",
            "4f01eb7ed5d6dda2",
            "0dc8930f2f8d462d",
            "0c0f89aac9054d81",
            "23355b3868550150",
            "2d821cc198a20128",
            "07682dd6a76e1993",
            "6b886ca41b96ee22",
            "553be67eae399936",
            "09ba7a0f976cfd88",
            "3e52a0de31df6e07",
            "1b074e57505c7f01"
        ],
        "x": 2254,
        "y": 599,
        "w": 2144,
        "h": 994
    },
    {
        "id": "c8214d0c397acb7c",
        "type": "group",
        "z": "3636968d85524595",
        "name": "Show token",
        "style": {
            "fill": "#ffffbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "656b0f478cc39c89",
            "36fe5cdcdca0b645",
            "4e052eba984b0c13"
        ],
        "x": 994,
        "y": 39,
        "w": 572,
        "h": 82
    },
    {
        "id": "5597e41fb9f06182",
        "type": "group",
        "z": "7873bcdda0fd36a9",
        "g": "4b7e30d0ef4fb504",
        "name": "Send data to platform",
        "style": {
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "114f9977364f2915",
            "73b79b6320cba99a",
            "f60a9e7d668028e2",
            "a14845fed88637ca",
            "e8f8ac55689d6405",
            "af1595de0477e9f7",
            "3de98f71fd81871d"
        ],
        "x": 654,
        "y": 639,
        "w": 612,
        "h": 182
    },
    {
        "id": "986772cca4233155",
        "type": "group",
        "z": "7873bcdda0fd36a9",
        "g": "4b7e30d0ef4fb504",
        "name": "Send data to Wettermanufaktur dataspace",
        "style": {
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ecaee78340a64ad8",
            "5c9bb3df08939f97",
            "0e74a5e78bc80736",
            "71577150aafa6e4c",
            "8d027f2869c86dfc"
        ],
        "x": 654,
        "y": 859,
        "w": 592,
        "h": 162
    },
    {
        "id": "dbaf850120acd827",
        "type": "group",
        "z": "7873bcdda0fd36a9",
        "g": "4b7e30d0ef4fb504",
        "name": "Retrieve data (API)",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "b16358953f361383",
            "54c92ccdc1f614d0",
            "b12d27078afa7ddf",
            "692fd871a1e2c5ee",
            "2afa1a857008f0bf",
            "74705cf07b3242e8",
            "bf859db4853e225d",
            "6b6353cc0da66ae4",
            "5871c2888eb621f2",
            "1402e565a812c74b",
            "779f78b62f3e87f9",
            "1cdfe1dc11956005"
        ],
        "x": 114,
        "y": 59,
        "w": 1152,
        "h": 342
    },
    {
        "id": "dc143f85a82dc0a9",
        "type": "group",
        "z": "7873bcdda0fd36a9",
        "g": "4b7e30d0ef4fb504",
        "name": "Convert data",
        "style": {
            "fill": "#7fb7df",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "825f0dc80641ca44",
            "65f5f1ca9719f4b3"
        ],
        "x": 574,
        "y": 459,
        "w": 492,
        "h": 82
    },
    {
        "id": "2d90eca95a758d4a",
        "type": "group",
        "z": "3636968d85524595",
        "g": "3a7b93f1b0514cf9",
        "name": "Get data",
        "style": {
            "label": true,
            "fill": "#bfdbef",
            "color": "#000000"
        },
        "nodes": [
            "d75cc5784c7f0e45",
            "e085a0838c3c3557"
        ],
        "x": 54,
        "y": 273,
        "w": 938,
        "h": 314
    },
    {
        "id": "9cf769a0de6323b5",
        "type": "group",
        "z": "3636968d85524595",
        "g": "598fbaded8837b3a",
        "name": "Get data",
        "style": {
            "label": true,
            "fill": "#bfdbef",
            "color": "#000000"
        },
        "nodes": [
            "e82029f629187510",
            "88b5c97dc133bd77",
            "bd1a7d4ad0e78fc7"
        ],
        "x": 1044,
        "y": 273,
        "w": 922,
        "h": 334
    },
    {
        "id": "eaa3e91bbb9c6af6",
        "type": "group",
        "z": "3636968d85524595",
        "g": "3a7b93f1b0514cf9",
        "name": "Send data to platform",
        "style": {
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "bcc111b64ed7e7d9",
            "eaaacde88eb491be",
            "0bce3f25c20b148d",
            "f27f56db18409e36",
            "ad5a7ed37e99eeb2"
        ],
        "x": 334,
        "y": 679,
        "w": 592,
        "h": 162
    },
    {
        "id": "5ab2ad979e608b78",
        "type": "group",
        "z": "3636968d85524595",
        "g": "598fbaded8837b3a",
        "name": "Send data to platform",
        "style": {
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "1bc4338d9612aea5",
            "f647b91db2232508",
            "4b9cfc52f745108e",
            "3830d4356ccb51fa",
            "255b4d1d1f42121f"
        ],
        "x": 1394,
        "y": 659,
        "w": 592,
        "h": 162
    },
    {
        "id": "8c9568258bc6180e",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "Attach file to resource",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#bfdbef"
        },
        "nodes": [
            "42b18d321f11062d",
            "dda23cbc47ae44dc",
            "ca32536953c19bdb",
            "6f38ad26bb23404f",
            "d2187b4c112b610b"
        ],
        "x": 74,
        "y": 2159,
        "w": 1352,
        "h": 82
    },
    {
        "id": "0a470830db50cb31",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "Check the datastore status for a resource",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#bfdbef"
        },
        "nodes": [
            "c2efd610502d158a",
            "89ee1b0786797aa7",
            "7f4b2a6c7e0a9535",
            "35b4b63d29d7e66c",
            "5fb3f110d1d176fb"
        ],
        "x": 74,
        "y": 1919,
        "w": 992,
        "h": 82
    },
    {
        "id": "3839d35226b92f3a",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "Check the resource",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#bfdbef"
        },
        "nodes": [
            "bd69fc2348143711",
            "d42b88f66e0d40de",
            "de2a151c9447669e",
            "4912b5361d16ab61",
            "5576e262e627b3f3"
        ],
        "x": 74,
        "y": 2019,
        "w": 972,
        "h": 82
    },
    {
        "id": "23562a97683f4fc7",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "e1f0eda674902441",
        "name": "LOGIN",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "color": "#000000"
        },
        "nodes": [
            "ba3a16cd60ca7e17",
            "b07b7bf6f90e7595",
            "d6c0c27915430176",
            "768a9e1adc6a0635",
            "6fa0bfceab4c5bec",
            "b88934d334fa11c7"
        ],
        "x": 74,
        "y": 239,
        "w": 1312,
        "h": 82
    },
    {
        "id": "9fe4aa23d62f409b",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "e1f0eda674902441",
        "name": "GET CSRF TOKEN",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "color": "#000000"
        },
        "nodes": [
            "6e2fd21cf149cb1a",
            "6891af1ed41b4cef",
            "89e5e16ae2830922",
            "b7aeb2f85d663348",
            "fa5db7cae1ae1b21"
        ],
        "x": 74,
        "y": 399,
        "w": 1092,
        "h": 82
    },
    {
        "id": "e0135b6350146933",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "For each weatherstation",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#e3f3d3"
        },
        "nodes": [
            "7bb3aaa08da47370",
            "aeb9a00e3d46a9b1",
            "88b1129479ec3ca1",
            "7be90d830f0490a4"
        ],
        "x": 68,
        "y": 833,
        "w": 2084,
        "h": 734
    },
    {
        "id": "b5c95d5e7650c05c",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "086535801c0646b6",
        "name": "For each weatherstation",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#e3f3d3"
        },
        "nodes": [
            "d9aa0959288a3d57",
            "081d3baef8a50cc9",
            "df621c2b328d6d97",
            "606044d65891eef5",
            "1be955a43d8214fd",
            "64bd2cfda0f358f1",
            "638709fc3fc6d241",
            "838fca3b1056eb42",
            "15e2de6795a5deb3",
            "efa8b8f50ff60f81"
        ],
        "x": 2288,
        "y": 833,
        "w": 2084,
        "h": 734
    },
    {
        "id": "e085a0838c3c3557",
        "type": "group",
        "z": "3636968d85524595",
        "g": "2d90eca95a758d4a",
        "name": "For each location",
        "style": {
            "label": true,
            "color": "#000000",
            "stroke": "#000000"
        },
        "nodes": [
            "b411471c5702e757",
            "180dfca693b1dce0",
            "93fb556682c09ae8",
            "95d78af4d1fd009b",
            "3c908dee47b0b9c4",
            "9b0dfd4ca4c4db4e",
            "eae0625fcb47971c",
            "4a0ef334213345ae"
        ],
        "x": 254,
        "y": 299,
        "w": 712,
        "h": 262
    },
    {
        "id": "88b5c97dc133bd77",
        "type": "group",
        "z": "3636968d85524595",
        "g": "9cf769a0de6323b5",
        "name": "For each location",
        "style": {
            "label": true,
            "color": "#000000",
            "stroke": "#000000"
        },
        "nodes": [
            "15e51ef8641d9cf5",
            "39ea9014305d9f71",
            "3a30412e18ca3567",
            "bd021ccd9dd0be08",
            "41630822d55aab16",
            "c3bf762891ecdd43"
        ],
        "x": 1314,
        "y": 299,
        "w": 512,
        "h": 282
    },
    {
        "id": "7bb3aaa08da47370",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "e0135b6350146933",
        "name": "Create Resource (monthly - Wetterstation_LOCATION_YYYY_MM)",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#bfdbef"
        },
        "nodes": [
            "6230d0eac3c6fa4b",
            "2978fc07c15df79d",
            "0fe6c574b9649839",
            "43c12965e5b16c5b",
            "8283f42a5576d27f"
        ],
        "x": 914,
        "y": 859,
        "w": 1132,
        "h": 82
    },
    {
        "id": "7be90d830f0490a4",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "e0135b6350146933",
        "name": "Attach resource to dataset (monthly)",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#bfdbef"
        },
        "nodes": [
            "5e1e93db54c45325",
            "8a03d3ab7dede23b",
            "dfa1bdfa3a0dd4ee",
            "2fab1f7c4d5a7cc1",
            "333b84bddec05435",
            "cde4352d19af7419",
            "1b7dd6a012491607"
        ],
        "x": 914,
        "y": 959,
        "w": 1212,
        "h": 142
    },
    {
        "id": "aeb9a00e3d46a9b1",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "e0135b6350146933",
        "name": "Attach file to resource (daily - override file with running monthly data)",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#bfdbef"
        },
        "nodes": [
            "bd3b9181f0ef6a84",
            "fcc3f073a88990bf",
            "cf47f0af10d53a1f",
            "9e2a7cce4cd69a0e",
            "a147ab13e7b27e4a",
            "53a136bd7f817292",
            "832cf50bf0cbb903",
            "9eb7fed954aade62",
            "9e4e595636b20a2c",
            "f82c06edc070d262"
        ],
        "x": 94,
        "y": 1179,
        "w": 1152,
        "h": 222
    },
    {
        "id": "88b1129479ec3ca1",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "e0135b6350146933",
        "name": "Import resource file into datastore (daily)",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#bfdbef"
        },
        "nodes": [
            "1df1d716e00620e3",
            "29325da99efccf85",
            "71c4e24e0b050ff1",
            "3c1e83f987616c5c",
            "8b35b894315f35d4"
        ],
        "x": 94,
        "y": 1439,
        "w": 1132,
        "h": 102
    },
    {
        "id": "d9aa0959288a3d57",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "b5c95d5e7650c05c",
        "name": "Create Resource (monthly - Wetterstation_LOCATION_YYYY_MM)",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#bfdbef"
        },
        "nodes": [
            "5a9e4e1b883f1b51",
            "ce44eac50555a79d",
            "dff95f4b730d70f0",
            "4f7109d69f783cca",
            "5366a362da07a399"
        ],
        "x": 3134,
        "y": 859,
        "w": 1132,
        "h": 82
    },
    {
        "id": "081d3baef8a50cc9",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "b5c95d5e7650c05c",
        "name": "Attach file to resource (daily - override file with running monthly data)",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#bfdbef"
        },
        "nodes": [
            "7dcf60a5f750e806",
            "064f5aaa2dacc81b",
            "13ea002a5d527ee8",
            "c2bdd1ad9e07b94e",
            "6f96deaf5f81eed8",
            "550a3d21d0859043",
            "e59a2dc3cc0ccd5d",
            "d295495ea4252595",
            "788e88d220301421",
            "e9a4def497f171f6"
        ],
        "x": 2314,
        "y": 1179,
        "w": 1152,
        "h": 222
    },
    {
        "id": "df621c2b328d6d97",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "b5c95d5e7650c05c",
        "name": "Import resource file into datastore (daily)",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#bfdbef"
        },
        "nodes": [
            "8a55f0f6dd06b2c5",
            "649d6acbb44d8a49",
            "afed2e885da729fc",
            "897c45e03b77992c",
            "f5e36aefe30a0649"
        ],
        "x": 2314,
        "y": 1439,
        "w": 1132,
        "h": 102
    },
    {
        "id": "606044d65891eef5",
        "type": "group",
        "z": "39d92afff0d156f4",
        "g": "b5c95d5e7650c05c",
        "name": "Attach resource to dataset (monthly)",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#bfdbef"
        },
        "nodes": [
            "2270dca6a02d3697",
            "007d0ac6fd8a1de6",
            "55f0e3d79dfa8a4e",
            "32726e1604ac0f34",
            "b04c426437af3767",
            "893500cf99ef210a",
            "1c2bdebbe7398c66",
            "d2126f4c3e1aaa76",
            "b32b9725913792ad"
        ],
        "x": 3134,
        "y": 959,
        "w": 1212,
        "h": 142
    },
    {
        "id": "fa84e319220ae3ca",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "ac23893feae710f1",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "data-timescale.prd-data-management-stack.svc.cluster.local",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "quantumleap",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "POSTGRES_USER",
        "userFieldType": "env",
        "password": "POSTGRES_PASS",
        "passwordFieldType": "env"
    },
    {
        "id": "114f9977364f2915",
        "type": "function",
        "z": "7873bcdda0fd36a9",
        "g": "5597e41fb9f06182",
        "name": "Prepare POST to Context Broker",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\";\nmsg.url = `${stellio}/entityOperations/upsert?options=update`;\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = 'application/ld+json';\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 700,
        "wires": [
            [
                "af1595de0477e9f7",
                "73b79b6320cba99a"
            ]
        ]
    },
    {
        "id": "73b79b6320cba99a",
        "type": "debug",
        "z": "7873bcdda0fd36a9",
        "g": "5597e41fb9f06182",
        "name": "log post request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 680,
        "wires": []
    },
    {
        "id": "f60a9e7d668028e2",
        "type": "http request",
        "z": "7873bcdda0fd36a9",
        "g": "5597e41fb9f06182",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 780,
        "wires": [
            [
                "a14845fed88637ca",
                "e8f8ac55689d6405"
            ]
        ]
    },
    {
        "id": "a14845fed88637ca",
        "type": "function",
        "z": "7873bcdda0fd36a9",
        "g": "5597e41fb9f06182",
        "name": "Result",
        "func": "if (msg.statusCode > 299) {\n    node.status({fill:\"red\",shape:\"dot\",text: msg.statusCode + \": \" + msg.payload});\n} else {\n    node.status({fill:\"green\",shape:\"dot\",text: \"Success\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "e8f8ac55689d6405",
        "type": "debug",
        "z": "7873bcdda0fd36a9",
        "g": "5597e41fb9f06182",
        "name": "log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 780,
        "wires": []
    },
    {
        "id": "ecaee78340a64ad8",
        "type": "function",
        "z": "7873bcdda0fd36a9",
        "g": "986772cca4233155",
        "name": "Prepare POST to Context Broker",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\";\nmsg.url = `${stellio}/entityOperations/upsert?options=update`;\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = 'application/ld+json';\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE') + \"_wm\";\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 900,
        "wires": [
            [
                "5c9bb3df08939f97",
                "0e74a5e78bc80736"
            ]
        ]
    },
    {
        "id": "5c9bb3df08939f97",
        "type": "debug",
        "z": "7873bcdda0fd36a9",
        "g": "986772cca4233155",
        "name": "log post request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 900,
        "wires": []
    },
    {
        "id": "0e74a5e78bc80736",
        "type": "http request",
        "z": "7873bcdda0fd36a9",
        "g": "986772cca4233155",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 980,
        "wires": [
            [
                "71577150aafa6e4c",
                "8d027f2869c86dfc"
            ]
        ]
    },
    {
        "id": "71577150aafa6e4c",
        "type": "function",
        "z": "7873bcdda0fd36a9",
        "g": "986772cca4233155",
        "name": "Result",
        "func": "if (msg.statusCode > 299) {\n    node.status({fill:\"red\",shape:\"dot\",text: msg.statusCode + \": \" + msg.payload});\n} else {\n    node.status({fill:\"green\",shape:\"dot\",text: \"Success\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "8d027f2869c86dfc",
        "type": "debug",
        "z": "7873bcdda0fd36a9",
        "g": "986772cca4233155",
        "name": "log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 980,
        "wires": []
    },
    {
        "id": "7a45a2ea06bdc9bf",
        "type": "function",
        "z": "7873bcdda0fd36a9",
        "g": "4b7e30d0ef4fb504",
        "name": "Filter only wintersense stations",
        "func": "const entities = msg.payload\n\nmsg.payload = []\n\nmsg.payload = entities.filter(entity => entity.surfaceTemperatureWintersense)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 820,
        "wires": [
            [
                "141f9ef98146e219"
            ]
        ]
    },
    {
        "id": "141f9ef98146e219",
        "type": "switch",
        "z": "7873bcdda0fd36a9",
        "g": "4b7e30d0ef4fb504",
        "name": "Only send if there are entities",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 900,
        "wires": [
            [
                "ecaee78340a64ad8"
            ]
        ]
    },
    {
        "id": "f9ea02d8618e3f81",
        "type": "comment",
        "z": "7873bcdda0fd36a9",
        "g": "4b7e30d0ef4fb504",
        "name": "Namen der Station manuell hinterlegt",
        "info": "",
        "x": 930,
        "y": 440,
        "wires": []
    },
    {
        "id": "b16358953f361383",
        "type": "function",
        "z": "7873bcdda0fd36a9",
        "g": "dbaf850120acd827",
        "name": "Get Stellio entities",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\";\nmsg.url = `${stellio}/entities?type=WeatherObserved`;\n\nmsg.headers = {}\nmsg.headers[\"Content-Type\"] = 'application/ld+json';\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nmsg.headers[\"Link\"] = '<https://context.udp-kn.de/main-context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"'\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "54c92ccdc1f614d0"
            ]
        ]
    },
    {
        "id": "825f0dc80641ca44",
        "type": "debug",
        "z": "7873bcdda0fd36a9",
        "g": "dc143f85a82dc0a9",
        "name": "log datamodels",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 500,
        "wires": []
    },
    {
        "id": "54c92ccdc1f614d0",
        "type": "http request",
        "z": "7873bcdda0fd36a9",
        "g": "dbaf850120acd827",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 100,
        "wires": [
            [
                "692fd871a1e2c5ee"
            ]
        ]
    },
    {
        "id": "b12d27078afa7ddf",
        "type": "http request",
        "z": "7873bcdda0fd36a9",
        "g": "dbaf850120acd827",
        "name": "GET",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1010,
        "y": 280,
        "wires": [
            [
                "5871c2888eb621f2"
            ]
        ]
    },
    {
        "id": "692fd871a1e2c5ee",
        "type": "function",
        "z": "7873bcdda0fd36a9",
        "g": "dbaf850120acd827",
        "name": "Get TTI devices",
        "func": "msg.stellioEntities = msg.payload\n\nmsg.url = `https://smartgreencitykonstanz.eu1.cloud.thethings.industries/api/v3/search/applications/sgc-2023-11-wetterstationen/devices`\n\nmsg.headers = {\n    \"Authorization\": \"Bearer \" + env.get(\"TTI_PASSWORD\")\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 160,
        "wires": [
            [
                "74705cf07b3242e8"
            ]
        ]
    },
    {
        "id": "2afa1a857008f0bf",
        "type": "inject",
        "z": "7873bcdda0fd36a9",
        "g": "dbaf850120acd827",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "*/15 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 100,
        "wires": [
            [
                "b16358953f361383"
            ]
        ]
    },
    {
        "id": "74705cf07b3242e8",
        "type": "http request",
        "z": "7873bcdda0fd36a9",
        "g": "dbaf850120acd827",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 160,
        "wires": [
            [
                "6b6353cc0da66ae4"
            ]
        ]
    },
    {
        "id": "bf859db4853e225d",
        "type": "split",
        "z": "7873bcdda0fd36a9",
        "g": "dbaf850120acd827",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 630,
        "y": 220,
        "wires": [
            [
                "779f78b62f3e87f9"
            ]
        ]
    },
    {
        "id": "6b6353cc0da66ae4",
        "type": "change",
        "z": "7873bcdda0fd36a9",
        "g": "dbaf850120acd827",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.end_devices",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 220,
        "wires": [
            [
                "bf859db4853e225d"
            ]
        ]
    },
    {
        "id": "5871c2888eb621f2",
        "type": "function",
        "z": "7873bcdda0fd36a9",
        "g": "dbaf850120acd827",
        "name": "Parse json",
        "func": "function parseConcatenatedJSON(str) {\n    // Split the string on line breaks, handling both Unix (\\n) and Windows (\\r\\n) line endings\n    const lines = str.split(/\\r?\\n/);\n    const result = [];\n\n    for (const line of lines) {\n        const trimmedLine = line.trim();\n        if (trimmedLine) { // Skip empty lines\n            try {\n                result.push(JSON.parse(trimmedLine));\n            } catch (e) {\n                console.error('Failed to parse JSON:', trimmedLine, e);\n                // Handle parsing error if necessary\n            }\n        }\n    }\n    return result;\n}\n\nmsg.payload = parseConcatenatedJSON(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 280,
        "wires": [
            [
                "1402e565a812c74b"
            ]
        ]
    },
    {
        "id": "1402e565a812c74b",
        "type": "join",
        "z": "7873bcdda0fd36a9",
        "g": "dbaf850120acd827",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 630,
        "y": 360,
        "wires": [
            [
                "65f5f1ca9719f4b3",
                "1cdfe1dc11956005"
            ]
        ]
    },
    {
        "id": "65f5f1ca9719f4b3",
        "type": "function",
        "z": "7873bcdda0fd36a9",
        "g": "dc143f85a82dc0a9",
        "name": "Create datamodels",
        "func": "msg.payload = msg.payload.flat()\n\nconst dataModels = [];\n\nfor (const measurement of msg.payload) {\n    const data = measurement?.result?.uplink_message?.decoded_payload;\n    const deviceId = measurement?.result?.end_device_ids?.device_id;\n    const receivedAt = measurement?.result?.received_at;\n\n    // 3. Check for required fields\n    if (!data) {\n        node.warn(\"Decoded payload not found in measurement, skipping...\");\n        continue;\n    }\n    if (!deviceId) {\n        node.warn(\"Device ID not found in measurement, skipping...\");\n        continue;\n    }\n    if (!receivedAt) {\n        node.warn(\"Received_at timestamp not found in measurement, skipping...\");\n        continue;\n    }\n\n    const dateObserved = new Date(measurement.result.received_at);\n    const atmosphericPressure = data.pressure;\n    const precipitation = data.precipitation;\n    const relativeHumidity = data.humidity;\n    const temperature = data.temperature;\n    const windDirection = data.wind_direction_avg;\n    const windSpeedMin = data.wind_speed_min;\n    const windSpeedMax = data.wind_speed_max;\n    const windSpeedAvg = data.wind_speed_avg;\n\n    if (temperature == -65535){\n        node.warn(\"invalid value found, skipping\")\n        continue;\n    }\n\n    let location;\n    if (measurement?.result?.uplink_message?.locations) {\n        location = measurement.result.uplink_message.locations.user;\n    } else {\n        if (measurement.result.end_device_ids.device_id == 'eui-8cf95720000d5119-sn24020755') {\n            location = [9.17889136008768, 47.6624186913087]\n            node.warn(\"location set manually for Stadtgarten\")\n        }\n        if (measurement.result.end_device_ids.device_id == 'eui-8cf95720000d4bdc-sn24030049') {\n            location = [9.168898363858, 47.658238563921]\n            node.warn(\"location set manually for Döbele\")\n        }\n    }\n\n    if (!location) {\n        node.error('could not read location')\n        node.error(measurement)\n        continue\n    }\n\n    const stationNames = {\n        \"eui-8cf95720000d2f2c-sn24020753\": \"Europapark\",\n        \"eui-8cf95720000d2f46-sn24020757\": \"Stephansplatz\",\n        \"eui-8cf95720000d2f47-sn24020748\": \"Hörnle\",\n        \"eui-8cf95720000d2f50-sn24020754\": \"Friedrichstrasse\",\n        \"eui-8cf95720000d2f5b-sn24030050\": \"Herose-Park\",\n        \"eui-8cf95720000d2f64-sn24020759\": \"Riedstrasse\",\n        \"eui-8cf95720000d344d-sn24020756\": \"Bodanplatz\",\n        \"eui-8cf95720000d345b-sn24020749\": \"Mainaustrasse\",\n        \"eui-8cf95720000d34c6-sn24020750\": \"Fähre Staad\",\n        \"eui-8cf95720000d3507-sn24020758\": \"Marktstätte\",\n        \"eui-8cf95720000d4bdc-sn24030049\": \"Döbele\",\n        \"eui-8cf95720000d5119-sn24020755\": \"Stadtgarten\"\n    };\n\n    function getStationName(deviceId) {\n        return stationNames[deviceId] || \"Unknown Station\"; // Standardname oder Fehlerbehandlung\n    }\n\n    const stationName = getStationName(deviceId);\n\n    // Sicherstellen, dass msg.stationInfo existiert\n    if (!msg.stationInfo) {\n        msg.stationInfo = {};\n    }\n\n    // Prüfen und zuweisen des Namens\n    if (stationName !== \"Unknown Station\") {\n        msg.stationInfo.station_name = stationName;\n    }\n\n    // Check to exclude the specific deviceId Bodanplatz (wrong payload)\n    //if (deviceId === \"eui-8cf95720000d344d-sn24020756\") {\n    //    return msg;  // Exit the workflow if the deviceId matches the one to exclude\n    //}\n\n    const weatherObserved = {\n        \"id\": \"urn:ngsi-ld:WeatherObserved:\" + deviceId,\n        \"type\": \"WeatherObserved\",\n        \"dateObserved\": {\n            \"type\": \"Property\",\n            \"value\": dateObserved.toISOString()\n        },\n        \"atmosphericPressure\": {\n            \"type\": \"Property\",\n            \"value\": parseFloat(atmosphericPressure.toFixed(2)),\n            \"observedAt\": dateObserved.toISOString()\n        },\n        \"precipitation\": {\n            \"type\": \"Property\",\n            \"value\": parseFloat(precipitation.toFixed(2)),\n            \"observedAt\": dateObserved.toISOString()\n        },\n        \"relativeHumidity\": {\n            \"type\": \"Property\",\n            \"value\": parseFloat(relativeHumidity.toFixed(2)),\n            \"observedAt\": dateObserved.toISOString()\n        },\n        \"temperature\": {\n            \"type\": \"Property\",\n            \"value\": parseFloat(temperature.toFixed(2)),\n            \"observedAt\": dateObserved.toISOString()\n        },\n        \"windDirection\": {\n            \"type\": \"Property\",\n            \"value\": windDirection,\n            \"observedAt\": dateObserved.toISOString()\n        },\n        \"windSpeedMin\": {\n            \"type\": \"Property\",\n            \"value\": parseFloat(windSpeedMin.toFixed(2)),\n            \"observedAt\": dateObserved.toISOString()\n        },\n        \"windSpeedMax\": {\n            \"type\": \"Property\",\n            \"value\": parseFloat(windSpeedMax.toFixed(2)),\n            \"observedAt\": dateObserved.toISOString()\n        },\n        \"windSpeedAvg\": {\n            \"type\": \"Property\",\n            \"value\": parseFloat(windSpeedAvg.toFixed(2)),\n            \"observedAt\": dateObserved.toISOString()\n        },\n        \"name\": {\n            \"type\": \"Property\",\n            \"value\": msg.stationInfo.station_name,\n            \"observedAt\": dateObserved.toISOString()\n        },\n        \"location\": {\n            \"type\": \"GeoProperty\",\n            \"value\": {\n                \"type\": \"Point\",\n                \"coordinates\": [\n                    location.longitude,\n                    location.latitude\n                ]\n            },\n            \"observedAt\": dateObserved.toISOString()\n        },\n        '@context': [\n            \"https://context.udp-kn.de/main-context.jsonld\"\n        ],\n    };\n\n    // Wenn zusätzliche Sensoren angeschlossen sind\n    if (data.wintersense_air_humidity !== undefined) {\n        weatherObserved[\"temperatureWintersense\"] = {\n            \"type\": \"Property\",\n            \"value\": data.wintersense_air_temperature,\n            \"observedAt\": dateObserved.toISOString()\n        };\n\n        weatherObserved[\"humidityWintersense\"] = {\n            \"type\": \"Property\",\n            \"value\": data.wintersense_air_humidity,\n            \"observedAt\": dateObserved.toISOString()\n        };\n\n        weatherObserved[\"surfaceTemperatureWintersense\"] = {\n            \"type\": \"Property\",\n            \"value\": parseFloat(data.wintersense_surface_temperature.toFixed(2)),\n            \"observedAt\": dateObserved.toISOString()\n        };\n    }\n\n    dataModels.push(weatherObserved);\n\n}\n\nmsg.payload = dataModels\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 500,
        "wires": [
            [
                "825f0dc80641ca44",
                "d029aa45b83d4c64",
                "7a45a2ea06bdc9bf"
            ]
        ]
    },
    {
        "id": "d029aa45b83d4c64",
        "type": "switch",
        "z": "7873bcdda0fd36a9",
        "g": "4b7e30d0ef4fb504",
        "name": "Only send if there are entities",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 940,
        "y": 600,
        "wires": [
            [
                "114f9977364f2915"
            ]
        ]
    },
    {
        "id": "af1595de0477e9f7",
        "type": "split",
        "z": "7873bcdda0fd36a9",
        "g": "5597e41fb9f06182",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "500",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 850,
        "y": 740,
        "wires": [
            [
                "3de98f71fd81871d"
            ]
        ]
    },
    {
        "id": "3de98f71fd81871d",
        "type": "delay",
        "z": "7873bcdda0fd36a9",
        "g": "5597e41fb9f06182",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1070,
        "y": 740,
        "wires": [
            [
                "f60a9e7d668028e2"
            ]
        ]
    },
    {
        "id": "779f78b62f3e87f9",
        "type": "function",
        "z": "7873bcdda0fd36a9",
        "g": "dbaf850120acd827",
        "name": "Prepare request for TTI Storage API",
        "func": "//const ttnDeviceId = msg.payload.ids.device_id\n\n// Continue execution if the device ID is NOT the excluded one\n//if (ttnDeviceId !== \"eui-8cf95720000d344d-sn24020756\" && ttnDeviceId !== \"eui-8cf95720000d2f50-sn24020754\") {\n    function getDevEui(str) {\n        const index = str.indexOf('eui-');\n        if (index !== -1) {\n            return str.substring(index);\n        } else {\n            return '';\n        }\n    }\n\nfunction addSeconds(timestamp, seconds) {\n    // Parse the timestamp into a Date object (nanoseconds will be truncated)\n    const date = new Date(timestamp);\n\n    // Add seconds\n    date.setSeconds(date.getSeconds() + seconds);\n\n    // Return the new timestamp in ISO format (milliseconds precision)\n    return date.toISOString();\n}\n\nconst ttnDeviceId = msg.payload.ids.device_id\n\n//if (ttnDeviceId === \"eui-8cf95720000d344d-sn24020756\") {\n //   node.warn(`Device ${ttnDeviceId} is excluded.`);\n //   return null; // Stop execution for this device\n//}\n\nconst stellioEntity = msg.stellioEntities.find(entity => getDevEui(entity.id) === ttnDeviceId)\n\n// if stellio entity exists, get all values from API since last timestamp\n// if it doesn't exist yet, get all values from API for this ttn device id and it will create the new stellio entity\n\nif(stellioEntity) {\n    const lastDateObserved = addSeconds(stellioEntity.dateObserved.value, 5) // Add some seconds because TTI saves timestamp up to nanoseconds and there would be duplicates.\n    const devEui = getDevEui(stellioEntity.id)\n\n    msg.url = `https://smartgreencitykonstanz.eu1.cloud.thethings.industries/api/v3/as/applications/sgc-2023-11-wetterstationen/devices/${devEui}/packages/storage/uplink_message?after=${lastDateObserved}`\n} else {\n    const devEui = getDevEui(stellioEntity.id)\n\n    node.warn(`no stellio entity matches ttn device id ${devEui}, will be created`)\n\n    msg.url = `https://smartgreencitykonstanz.eu1.cloud.thethings.industries/api/v3/as/applications/sgc-2023-11-wetterstationen/devices/${devEui}/packages/storage/uplink_message`\n}\n\nmsg.headers = {\n    \"Authorization\": \"Bearer \" + env.get(\"TTI_PASSWORD\")\n}\n\n    return msg;\n\n\n// If the device ID is the excluded one, log a warning and do nothing\n//node.warn(`Device ${ttnDeviceId} is excluded.`);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 280,
        "wires": [
            [
                "b12d27078afa7ddf"
            ]
        ]
    },
    {
        "id": "1cdfe1dc11956005",
        "type": "debug",
        "z": "7873bcdda0fd36a9",
        "g": "dbaf850120acd827",
        "name": "debug 87",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 360,
        "wires": []
    },
    {
        "id": "f124085a041a7fc6",
        "type": "http request",
        "z": "3636968d85524595",
        "g": "19edac2a759365c2",
        "name": "POST",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 80,
        "wires": [
            [
                "bdc50fddc9a35863",
                "af3abc32000a8a7b"
            ]
        ]
    },
    {
        "id": "e035e692fef3f2e3",
        "type": "function",
        "z": "3636968d85524595",
        "g": "19edac2a759365c2",
        "name": "Prepare POST",
        "func": "msg.url = \"https://weathersolutions.eu.auth0.com/oauth/token\"\n\nmsg.payload = {\n    \"grant_type\": \"password\",\n    \"username\": env.get(\"WM_USERNAME\"),\n    \"password\": env.get(\"WM_PASSWORD\"),\n    \"audience\": \"https://shopman.metops.net\",\n    \"scope\": \"openid\",\n    \"client_id\": \"8ACYTwEZXKpZEFabN88x3n5H661b08wC\",\n    \"client_secret\": env.get(\"WM_CLIENT_SECRET\")\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 80,
        "wires": [
            [
                "f124085a041a7fc6"
            ]
        ]
    },
    {
        "id": "af3abc32000a8a7b",
        "type": "debug",
        "z": "3636968d85524595",
        "g": "19edac2a759365c2",
        "name": "debug 63",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 80,
        "wires": []
    },
    {
        "id": "bdc50fddc9a35863",
        "type": "change",
        "z": "3636968d85524595",
        "g": "19edac2a759365c2",
        "name": "Save access token",
        "rules": [
            {
                "t": "set",
                "p": "access_token",
                "pt": "flow",
                "to": "payload.access_token",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4d4a1e78e7d46815",
        "type": "inject",
        "z": "3636968d85524595",
        "g": "19edac2a759365c2",
        "name": "Every 12 hours",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "43200",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "e035e692fef3f2e3"
            ]
        ]
    },
    {
        "id": "d75cc5784c7f0e45",
        "type": "inject",
        "z": "3636968d85524595",
        "g": "2d90eca95a758d4a",
        "name": "Alle 15min",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"station_id\":107381,\"station_name\":\"Uni Eichbergstraße\",\"station_location\":{\"lat\":0,\"lon\":0}},{\"station_id\":107382,\"station_name\":\"Schiffstraße\",\"station_location\":{\"lat\":0,\"lon\":0}},{\"station_id\":107383,\"station_name\":\"Herose Fahrradbrücke\",\"station_location\":{\"lat\":0,\"lon\":0}}]",
        "payloadType": "json",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "95d78af4d1fd009b"
            ]
        ]
    },
    {
        "id": "b411471c5702e757",
        "type": "function",
        "z": "3636968d85524595",
        "g": "e085a0838c3c3557",
        "name": "Prepare GET",
        "func": "msg.url = \"https://shopman-bff-backend.metops.net/obs/\" + msg.payload.station_id\n\nmsg.headers = {\n    \"Authorization\": \"Bearer \" + flow.get(\"access_token\")\n}\n\nmsg.stationInfo = msg.payload\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 340,
        "wires": [
            [
                "180dfca693b1dce0"
            ]
        ]
    },
    {
        "id": "180dfca693b1dce0",
        "type": "http request",
        "z": "3636968d85524595",
        "g": "e085a0838c3c3557",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 340,
        "wires": [
            [
                "93fb556682c09ae8",
                "4a0ef334213345ae"
            ]
        ]
    },
    {
        "id": "93fb556682c09ae8",
        "type": "function",
        "z": "3636968d85524595",
        "g": "e085a0838c3c3557",
        "name": "Create WeatherObserved",
        "func": "const data = msg.payload.stations[0]\n\nconst mostRecentItem = data.timeseries.timeItems[0]; // Get the first item, should be the most recent one\n\nif (mostRecentItem == undefined) {\n  msg.payload = {}\n  return msg;\n}\n\n// Extracting weather parameters from the first item\nconst weatherParameters = mostRecentItem.weatherparameters;\nconst dateObserved = new Date(mostRecentItem.dtg);\n\nconst stationCoordinates = {\n  107381: { lat: 47.688727, lon: 9.183485 },  // Uni Eichbergstraße\n  107382: { lat: 47.682476, lon: 9.207405 },  // Schiffstraße\n  107383: { lat: 47.668392, lon: 9.174062 },  // Herose Fahrradbrücke\n};\n\nfunction getCoordinates(stationId) {\n  return stationCoordinates[stationId] || { lat: 0, lon: 0 }; // Standardkoordinaten oder Fehlerbehandlung\n}\n\nconst coordinates = getCoordinates(data.stationId);\n\n// Extracting values from weather parameters and saving them into new variables\nlet roadTemperature, temperature, dewpoint, relativeHumidity;\nweatherParameters.forEach(param => {\n  if (param.hasOwnProperty('Road temperature [C]')) {\n    roadTemperature = param['Road temperature [C]'];\n  } else if (param.hasOwnProperty('Temperature [C]')) {\n    temperature = param['Temperature [C]'];\n  } else if (param.hasOwnProperty('Dewpoint [C]')) {\n    dewpoint = param['Dewpoint [C]'];\n  } else if (param.hasOwnProperty('Relative humidity [%]')) {\n    relativeHumidity = param['Relative humidity [%]'];\n  }\n});\n\nconst weatherObserved = {\n  \"id\": \"urn:ngsi-ld:WeatherObserved:wintersense-\" + data.stationId,\n  \"type\": \"WeatherObserved\",\n  \"dateObserved\": {\n    \"type\": \"Property\",\n    \"value\": dateObserved.toISOString()\n  },\n  \"dewPoint\": {\n    \"type\": \"Property\",\n    \"value\": dewpoint,\n    \"observedAt\": dateObserved.toISOString()\n  },\n  \"surfaceTemperatureWintersense\": {\n    \"type\": \"Property\",\n    \"value\": roadTemperature,\n    \"observedAt\": dateObserved.toISOString()\n  },\n  \"relativeHumidity\": {\n    \"type\": \"Property\",\n    \"value\": relativeHumidity,\n    \"observedAt\": dateObserved.toISOString()\n  },\n  \"temperature\": {\n    \"type\": \"Property\",\n    \"value\": temperature,\n    \"observedAt\": dateObserved.toISOString()\n  },\n  \"name\": {\n    \"type\": \"Property\",\n    \"value\": msg.stationInfo.station_name,\n    \"observedAt\": dateObserved.toISOString()\n  },\n  \"location\": {\n    \"type\": \"GeoProperty\",\n    \"value\": {\n      \"type\": \"Point\",\n      \"coordinates\": [coordinates.lon, coordinates.lat]\n    }\n  },\n  '@context': [\n    \"https://context.udp-kn.de/main-context.jsonld\"\n  ]\n};\n\nmsg.payload = weatherObserved\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 440,
        "wires": [
            [
                "3c908dee47b0b9c4"
            ]
        ]
    },
    {
        "id": "95d78af4d1fd009b",
        "type": "split",
        "z": "3636968d85524595",
        "g": "e085a0838c3c3557",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 330,
        "y": 340,
        "wires": [
            [
                "b411471c5702e757"
            ]
        ]
    },
    {
        "id": "3c908dee47b0b9c4",
        "type": "join",
        "z": "3636968d85524595",
        "g": "e085a0838c3c3557",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 330,
        "y": 520,
        "wires": [
            [
                "9b0dfd4ca4c4db4e",
                "bcc111b64ed7e7d9"
            ]
        ]
    },
    {
        "id": "9b0dfd4ca4c4db4e",
        "type": "debug",
        "z": "3636968d85524595",
        "g": "e085a0838c3c3557",
        "name": "log data models",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 520,
        "wires": []
    },
    {
        "id": "eae0625fcb47971c",
        "type": "comment",
        "z": "3636968d85524595",
        "g": "e085a0838c3c3557",
        "name": "Koordinaten manuell hinterlegt",
        "info": "",
        "x": 760,
        "y": 420,
        "wires": []
    },
    {
        "id": "e82029f629187510",
        "type": "inject",
        "z": "3636968d85524595",
        "g": "9cf769a0de6323b5",
        "name": "Alle 6 Stunden",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"station_id\":107381,\"station_name\":\"Uni Eichbergstraße\",\"station_location\":{\"lat\":0,\"lon\":0}},{\"station_id\":107382,\"station_name\":\"Schiffstraße\",\"station_location\":{\"lat\":0,\"lon\":0}},{\"station_id\":107383,\"station_name\":\"Herose Fahrradbrücke\",\"station_location\":{\"lat\":0,\"lon\":0}}]",
        "payloadType": "json",
        "x": 1180,
        "y": 360,
        "wires": [
            [
                "bd021ccd9dd0be08"
            ]
        ]
    },
    {
        "id": "15e51ef8641d9cf5",
        "type": "function",
        "z": "3636968d85524595",
        "g": "88b5c97dc133bd77",
        "name": "Prepare GET",
        "func": "const now = new Date()\n\nconst fourDaysFromNow = new Date(now);\nfourDaysFromNow.setDate(now.getDate() + 4);\n\nmsg.url = \"https://shopman-bff-backend.metops.net/weatherapi/\" + msg.payload.station_id + \"?dtgStart=\" + now.toISOString() + \"&dtgEnd=\" + fourDaysFromNow.toISOString()\n\nmsg.headers = {\n    \"Authorization\": \"Bearer \" + flow.get(\"access_token\")\n}\n\nmsg.stationInfo = msg.payload\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 360,
        "wires": [
            [
                "39ea9014305d9f71"
            ]
        ]
    },
    {
        "id": "39ea9014305d9f71",
        "type": "http request",
        "z": "3636968d85524595",
        "g": "88b5c97dc133bd77",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1750,
        "y": 340,
        "wires": [
            [
                "3a30412e18ca3567",
                "4572ae7826f8a221"
            ]
        ]
    },
    {
        "id": "3a30412e18ca3567",
        "type": "function",
        "z": "3636968d85524595",
        "g": "88b5c97dc133bd77",
        "name": "Create WeatherForecast",
        "func": "const data = msg.payload.stations[0]\n\nconst dataModels = []\n\nfor (const forecast of data.timeseries.timeItems) {\n  // Extracting weather parameters from the first item\n  const weatherParameters = forecast.weatherparameters;\n  const dateValidTo = new Date(forecast.dtg);\n  const dateIssued = new Date();\n\n  const stationCoordinates = {\n    107381: { lat: 47.688727, lon: 9.183485 },  // Uni Eichbergstraße\n    107382: { lat: 47.682476, lon: 9.207405 },  // Schiffstraße\n    107383: { lat: 47.668392, lon: 9.174062 },  // Herose Fahrradbrücke\n  };\n\n  function getCoordinates(stationId) {\n    return stationCoordinates[stationId] || { lat: 0, lon: 0 }; // Standardkoordinaten oder Fehlerbehandlung\n  }\n\n  const coordinates = getCoordinates(data.stationId);\n\n  // Extracting values from weather parameters and saving them into new variables\n  let windSpeed, windDirection, gustSpeed, temperature, precipitation, cloudCover, relativeHumidity;\n  weatherParameters.forEach(param => {\n    // Extracting values for each parameter\n    if (param.hasOwnProperty('Temperature [C]')) {\n      temperature = param['Temperature [C]'];\n    } else if (param.hasOwnProperty('Wind speed [m/s]')) {\n      windSpeed = param['Wind speed [m/s]'];\n    } else if (param.hasOwnProperty('Wind gust [m/s]')) {\n      gustSpeed = param['Wind gust [m/s]'];\n    } else if (param.hasOwnProperty('1h precipitation [mm]')) {\n      precipitation = param['1h precipitation [mm]'];\n    } else if (param.hasOwnProperty('Cloud cover [oktas] (effective)')) {\n      cloudCover = param['Cloud cover [oktas] (effective)'];\n    } else if (param.hasOwnProperty('Wind direction [deg]')) {\n      windDirection = param['Wind direction [deg]'];\n    } else if (param.hasOwnProperty('Relative humidity [%]')) {\n      relativeHumidity = param['Relative humidity [%]'];\n    }\n  });\n\n  const weatherForecast = {\n    \"id\": \"urn:ngsi-ld:WeatherForecast:wintersense-\" + data.stationId,\n    \"type\": \"WeatherForecast\",\n    \"relativeHumidity\": {\n      \"type\": \"Property\",\n      \"value\": relativeHumidity,\n      \"observedAt\": dateIssued.toISOString()\n    },\n    \"dateIssued\": {\n      \"type\": \"Property\",\n      \"value\": dateIssued.toISOString(),\n      \"observedAt\": dateIssued.toISOString()\n    },\n    \"validTo\": {\n      \"type\": \"Property\",\n      \"value\": dateValidTo.toISOString(),\n      \"observedAt\": dateIssued.toISOString()\n    },\n    \"temperature\": {\n      \"type\": \"Property\",\n      \"value\": temperature,\n      \"observedAt\": dateIssued.toISOString()\n    },\n    \"windDirection\": {\n      \"type\": \"Property\",\n      \"value\": windDirection,\n      \"observedAt\": dateIssued.toISOString()\n    },\n    \"windSpeed\": {\n      \"type\": \"Property\",\n      \"value\": windSpeed,\n      \"observedAt\": dateIssued.toISOString()\n    },\n    \"gustSpeed\": {\n      \"type\": \"Property\",\n      \"value\": gustSpeed,\n      \"observedAt\": dateIssued.toISOString()\n    },\n    \"precipitation\": {\n      \"type\": \"Property\",\n      \"value\": precipitation,\n      \"observedAt\": dateIssued.toISOString()\n    },\n    \"cloudCover\": {\n      \"type\": \"Property\",\n      \"value\": cloudCover,\n      \"observedAt\": dateIssued.toISOString()\n    },\n    \"name\": {\n      \"type\": \"Property\",\n      \"value\": msg.stationInfo.station_name\n    },\n    \"location\": {\n      \"type\": \"GeoProperty\",\n      \"value\": {\n        \"type\": \"Point\",\n             \"coordinates\": [coordinates.lon,coordinates.lat]\n      }\n    },\n    '@context': [\n      \"https://context.udp-kn.de/main-context.jsonld\"\n    ]\n  };\n\n  dataModels.push(weatherForecast)\n}\n\n\nmsg.payload = dataModels\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 460,
        "wires": [
            [
                "41630822d55aab16"
            ]
        ]
    },
    {
        "id": "bd021ccd9dd0be08",
        "type": "split",
        "z": "3636968d85524595",
        "g": "88b5c97dc133bd77",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1390,
        "y": 360,
        "wires": [
            [
                "15e51ef8641d9cf5"
            ]
        ]
    },
    {
        "id": "41630822d55aab16",
        "type": "join",
        "z": "3636968d85524595",
        "g": "88b5c97dc133bd77",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1390,
        "y": 540,
        "wires": [
            [
                "c3bf762891ecdd43",
                "1bc4338d9612aea5"
            ]
        ]
    },
    {
        "id": "c3bf762891ecdd43",
        "type": "debug",
        "z": "3636968d85524595",
        "g": "88b5c97dc133bd77",
        "name": "log data models",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 540,
        "wires": []
    },
    {
        "id": "bd1a7d4ad0e78fc7",
        "type": "comment",
        "z": "3636968d85524595",
        "g": "9cf769a0de6323b5",
        "name": "Koordinaten manuell hinterlegt",
        "info": "",
        "x": 1820,
        "y": 440,
        "wires": []
    },
    {
        "id": "4572ae7826f8a221",
        "type": "debug",
        "z": "3636968d85524595",
        "g": "598fbaded8837b3a",
        "name": "debug 64",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1960,
        "y": 380,
        "wires": []
    },
    {
        "id": "bcc111b64ed7e7d9",
        "type": "function",
        "z": "3636968d85524595",
        "g": "eaa3e91bbb9c6af6",
        "name": "Prepare POST to Context Broker",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\";\nmsg.url = `${stellio}/entityOperations/upsert?options=update`;\n\nmsg.payload = msg.payload.filter(obj => Object.keys(obj).length !== 0);\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = 'application/ld+json';\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 720,
        "wires": [
            [
                "eaaacde88eb491be",
                "0bce3f25c20b148d"
            ]
        ]
    },
    {
        "id": "eaaacde88eb491be",
        "type": "debug",
        "z": "3636968d85524595",
        "g": "eaa3e91bbb9c6af6",
        "name": "log post request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 720,
        "wires": []
    },
    {
        "id": "0bce3f25c20b148d",
        "type": "http request",
        "z": "3636968d85524595",
        "g": "eaa3e91bbb9c6af6",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 800,
        "wires": [
            [
                "f27f56db18409e36",
                "ad5a7ed37e99eeb2"
            ]
        ]
    },
    {
        "id": "f27f56db18409e36",
        "type": "function",
        "z": "3636968d85524595",
        "g": "eaa3e91bbb9c6af6",
        "name": "Result",
        "func": "if (msg.statusCode > 299) {\n    node.status({fill:\"red\",shape:\"dot\",text: msg.statusCode + \": \" + msg.payload});\n} else {\n    node.status({fill:\"green\",shape:\"dot\",text: \"Success\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "ad5a7ed37e99eeb2",
        "type": "debug",
        "z": "3636968d85524595",
        "g": "eaa3e91bbb9c6af6",
        "name": "log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 800,
        "wires": []
    },
    {
        "id": "1bc4338d9612aea5",
        "type": "function",
        "z": "3636968d85524595",
        "g": "5ab2ad979e608b78",
        "name": "Prepare POST to Context Broker",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\";\nmsg.url = `${stellio}/entityOperations/upsert?options=update`;\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = 'application/ld+json';\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\n\nconst entities = msg.payload.flat()\n\nmsg.payload = entities\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 700,
        "wires": [
            [
                "f647b91db2232508",
                "4b9cfc52f745108e"
            ]
        ]
    },
    {
        "id": "f647b91db2232508",
        "type": "debug",
        "z": "3636968d85524595",
        "g": "5ab2ad979e608b78",
        "name": "log post request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1860,
        "y": 700,
        "wires": []
    },
    {
        "id": "4b9cfc52f745108e",
        "type": "http request",
        "z": "3636968d85524595",
        "g": "5ab2ad979e608b78",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1490,
        "y": 780,
        "wires": [
            [
                "3830d4356ccb51fa",
                "255b4d1d1f42121f"
            ]
        ]
    },
    {
        "id": "3830d4356ccb51fa",
        "type": "function",
        "z": "3636968d85524595",
        "g": "5ab2ad979e608b78",
        "name": "Result",
        "func": "if (msg.statusCode > 299) {\n    node.status({fill:\"red\",shape:\"dot\",text: msg.statusCode + \": \" + msg.payload});\n} else {\n    node.status({fill:\"green\",shape:\"dot\",text: \"Success\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "255b4d1d1f42121f",
        "type": "debug",
        "z": "3636968d85524595",
        "g": "5ab2ad979e608b78",
        "name": "log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 780,
        "wires": []
    },
    {
        "id": "656b0f478cc39c89",
        "type": "inject",
        "z": "3636968d85524595",
        "g": "c8214d0c397acb7c",
        "name": "Go!",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1090,
        "y": 80,
        "wires": [
            [
                "36fe5cdcdca0b645"
            ]
        ]
    },
    {
        "id": "36fe5cdcdca0b645",
        "type": "function",
        "z": "3636968d85524595",
        "g": "c8214d0c397acb7c",
        "name": "read environment",
        "func": "return {payload : flow.get(\"access_token\")}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 80,
        "wires": [
            [
                "4e052eba984b0c13"
            ]
        ]
    },
    {
        "id": "4e052eba984b0c13",
        "type": "debug",
        "z": "3636968d85524595",
        "g": "c8214d0c397acb7c",
        "name": "service",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1460,
        "y": 80,
        "wires": []
    },
    {
        "id": "4a0ef334213345ae",
        "type": "debug",
        "z": "3636968d85524595",
        "g": "e085a0838c3c3557",
        "name": "debug 88",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 340,
        "wires": []
    },
    {
        "id": "6230d0eac3c6fa4b",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "7bb3aaa08da47370",
        "name": "Prepare POST",
        "func": "function getYesterdayDate() {\n    const today = new Date();\n    today.setDate(today.getDate() - 1);\n    return today.toISOString().split('T')[0];\n}\n\nmsg.station = msg.payload\n\nconst sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\");\nconst datenow = new Date().toISOString().split('T')[0]\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/node'\nmsg.method = \"POST\"\n\n\nconst body = {\n    \"type\": \"resource\",\n    \"title\": msg.payload.title,\n    \"status\": \"1\",\n    \"field_dcatapde_license\": {\n        \"und\":[{\"tid\":\"490\"}] // 490 seems to be cc-by/4.0 license\n    },\n    \"field_format\": {\n        \"und\":[{\"tid\":\"69\"}] // 69 == csv\n    }\n    \n}\n\n\nmsg.payload = body\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid, //sessionInfo.token,\n    'X-CSRF-Token': csrfToken\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 900,
        "wires": [
            [
                "2978fc07c15df79d",
                "4f74ad5e5977306f"
            ]
        ]
    },
    {
        "id": "2978fc07c15df79d",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "7bb3aaa08da47370",
        "name": "POST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1230,
        "y": 900,
        "wires": [
            [
                "43c12965e5b16c5b",
                "7735666b8a6611f5"
            ]
        ]
    },
    {
        "id": "0fe6c574b9649839",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "7bb3aaa08da47370",
        "name": "resource response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 900,
        "wires": []
    },
    {
        "id": "43c12965e5b16c5b",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "7bb3aaa08da47370",
        "name": "Save node/resource ID into DB",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: \"created nid: \" + msg.payload.nid });\n}\n\nmsg.nid = msg.payload.nid\n\nconst entityId = msg.station.entityId\nconst title = msg.station.title\n\nmsg.query = `\n-- Create table\nCREATE TABLE IF NOT EXISTS mtweather.dkan_mapping (\n    id INT GENERATED BY DEFAULT AS IDENTITY,\n    entity_id VARCHAR(100),\n    resource_name VARCHAR(100),\n    nid INT,\n    uuid UUID\n);\n\n-- Insert data\nINSERT INTO mtweather.dkan_mapping (entity_id, resource_name, nid, uuid) VALUES\n('${entityId}','${title}', ${msg.nid}, null);\n`\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 900,
        "wires": [
            [
                "333b84bddec05435",
                "8283f42a5576d27f"
            ]
        ]
    },
    {
        "id": "42b18d321f11062d",
        "type": "inject",
        "z": "39d92afff0d156f4",
        "g": "8c9568258bc6180e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2200,
        "wires": [
            [
                "5be4a91598375230"
            ]
        ]
    },
    {
        "id": "dda23cbc47ae44dc",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "8c9568258bc6180e",
        "name": "Prepare POST",
        "func": "\nconst sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\")\n\nconst nodeId = flow.get(\"resourceId\")\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/node/' +  nodeId + '/attach_file'\nmsg.method = \"POST\"\n\nconst dummyFile = msg.payload\n\n// ChatGPT inspired creation to send multipart/form-data. This actually works.\n\n// constants for generating multipart/form-data\nconst boundary = '--------------------------' + Math.random().toString().substring(2);\nconst crlf = '\\r\\n';\nconst delimiter = '--' + boundary;\n\n// replace these with your desired file name and file content\nconst fileName = 'wetterdaten_20240521.csv';\nconst fileField = 'files[1]';\nconst fileContent = msg.payload\n\nlet payload = '';\npayload += delimiter + crlf;\npayload += 'Content-Disposition: form-data; name=\"' + 'attach' + '\"' + crlf + crlf;\npayload += 1 + crlf;\npayload += delimiter + crlf;\npayload += 'Content-Disposition: form-data; name=\"' + 'field_name' + '\"' + crlf + crlf;\npayload += 'field_upload' + crlf;\npayload += delimiter + crlf;\npayload += 'Content-Disposition: form-data; name=\"' + fileField + '\"; filename=\"' + fileName + '\"' + crlf;\npayload += 'Content-Type: application/octet-stream' + crlf + crlf;\npayload += fileContent + crlf;\npayload += delimiter + '--' + crlf;\n\nmsg.headers = {\n    'Content-Type': 'multipart/form-data; boundary=' + boundary,\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid, //sessionInfo.token,\n    'X-CSRF-Token': csrfToken\n}\n\nmsg.payload = Buffer.from(payload, 'binary');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2200,
        "wires": [
            [
                "ca32536953c19bdb"
            ]
        ]
    },
    {
        "id": "ca32536953c19bdb",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "8c9568258bc6180e",
        "name": "POST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 2200,
        "wires": [
            [
                "d2187b4c112b610b"
            ]
        ]
    },
    {
        "id": "6f38ad26bb23404f",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "8c9568258bc6180e",
        "name": "file attach response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 2200,
        "wires": []
    },
    {
        "id": "d2187b4c112b610b",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "8c9568258bc6180e",
        "name": "Result",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: \"created fid: \" + msg.payload[0].fid });\n} else {\n    node.status({fill:\"red\",shape:\"ring\",text:msg.payload[0]});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2200,
        "wires": [
            [
                "6f38ad26bb23404f"
            ]
        ]
    },
    {
        "id": "5e1e93db54c45325",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "7be90d830f0490a4",
        "name": "Prepare PUT",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\")\n\nconst datasetNodeId = flow.get(\"datasetNodeId\")\nconst resourceNodeId = msg.nid\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/node/' +  datasetNodeId\nmsg.method = \"PUT\"\n\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid, //sessionInfo.token,\n    'X-CSRF-Token': csrfToken\n}\n\nif(msg.currentResourcesArray)\n{\n    msg.payload = {\n        \"field_resources\": {\n            \"und\": [\n                {\n                    \"target_id\": resourceNodeId\n                },\n                ...msg.currentResourcesArray\n            ]\n        }\n    };\n}else {\n    msg.payload = {\n        \"field_resources\": {\n            \"und\": [\n                {\n                    \"target_id\": resourceNodeId\n                }\n            ]\n        }\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 1000,
        "wires": [
            [
                "8a03d3ab7dede23b"
            ]
        ]
    },
    {
        "id": "8a03d3ab7dede23b",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "7be90d830f0490a4",
        "name": "PUT",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1770,
        "y": 1000,
        "wires": [
            [
                "2fab1f7c4d5a7cc1"
            ]
        ]
    },
    {
        "id": "dfa1bdfa3a0dd4ee",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "7be90d830f0490a4",
        "name": "resource attach response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 1060,
        "wires": []
    },
    {
        "id": "2fab1f7c4d5a7cc1",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "7be90d830f0490a4",
        "name": "Result",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: `Update nid ${msg.payload.nid} successful.` });\n} else {\n    node.status({fill:\"red\",shape:\"ring\",text:msg.payload[0]});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1060,
        "wires": [
            [
                "dfa1bdfa3a0dd4ee"
            ]
        ]
    },
    {
        "id": "5be4a91598375230",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "Fake a csv",
        "func": "// Define the CSV headers and data\nconst csvHeaders = 'device_id;received_at;temperature;humidity;pressure;precipitation';\nconst csvLine1 = 'sn24020755;2024-05-21T00:12:29.962380785Z;18,3;959,2;0'\nconst csvLine2 = 'sn24020755;2024-05-21T00:27:29.720763427Z;18,4;959,6;1';\n\n// Combine the headers and data into a single CSV string\nconst csvContent = `${csvHeaders}\\n${csvLine1}\\n${csvLine2}`;\n\n// Convert the CSV content to a Buffer\nconst csvBuffer = Buffer.from(csvContent, 'binary');\n\n// Set the CSV file as the payload\nmsg.payload = csvBuffer;\n\n// Set the filename for the CSV file\nmsg.filename = 'wetterdaten_20240521.csv';\n\n// Set the appropriate content type for CSV\nmsg.headers = {\n    'Content-Type': 'text/csv',\n    'Content-Disposition': 'attachment; filename=\"' + msg.filename + '\"'\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2280,
        "wires": [
            [
                "dda23cbc47ae44dc"
            ]
        ]
    },
    {
        "id": "bd3b9181f0ef6a84",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "aeb9a00e3d46a9b1",
        "name": "Prepare POST",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\");\n\nmsg.nid =  msg.payload[0].nid\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/node/' + msg.nid + '/attach_file';\nmsg.method = \"POST\";\n\n// Get the CSV content and filename from msg.payload\n//const csvContent = msg.payload.toString('utf8');\nconst csvContent = msg.csvContent\nconst fileName = msg.filename;\n\n// Constants for generating multipart/form-data\nconst boundary = '--multipart-boundary-' + Math.random().toString().substring(2);\nconst crlf = '\\r\\n';\nconst delimiter = '--' + boundary;\n\n// Build the multipart/form-data payload\nlet payload = '';\npayload += delimiter + crlf;\npayload += 'Content-Disposition: form-data; name=\"attach\"' + crlf + crlf;\npayload += '0' + crlf; // set attach to 0 to replace existing file\npayload += delimiter + crlf;\npayload += 'Content-Disposition: form-data; name=\"field_name\"' + crlf + crlf;\npayload += 'field_upload' + crlf;\npayload += delimiter + crlf;\npayload += 'Content-Disposition: form-data; name=\"files[1]\"; filename=\"' + fileName + '\"' + crlf;\npayload += 'Content-Type: text/csv' + crlf + crlf;\npayload += csvContent + crlf;\npayload += delimiter + '--' + crlf;\n\nmsg.headers = {\n    'Content-Type': 'multipart/form-data; boundary=' + boundary,\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid,\n    'X-CSRF-Token': csrfToken\n};\n\nmsg.payload = Buffer.from(payload, 'utf8');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1300,
        "wires": [
            [
                "fcc3f073a88990bf"
            ]
        ]
    },
    {
        "id": "fcc3f073a88990bf",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "aeb9a00e3d46a9b1",
        "name": "POST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 1300,
        "wires": [
            [
                "9e2a7cce4cd69a0e"
            ]
        ]
    },
    {
        "id": "cf47f0af10d53a1f",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "aeb9a00e3d46a9b1",
        "name": "file attach response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1300,
        "wires": []
    },
    {
        "id": "9e2a7cce4cd69a0e",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "aeb9a00e3d46a9b1",
        "name": "Result",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: \"created fid: \" + msg.payload[0].fid });\n} else {\n    node.status({fill:\"red\",shape:\"ring\",text:msg.payload[0]});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1300,
        "wires": [
            [
                "cf47f0af10d53a1f",
                "1df1d716e00620e3"
            ]
        ]
    },
    {
        "id": "a147ab13e7b27e4a",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "aeb9a00e3d46a9b1",
        "name": "query_result_to_csv",
        "func": "// Get the query results\nconst results = msg.payload;\n\n// Check if results are available\nif (!results || results.length === 0) {\n    node.error(\"No results returned from query\", msg);\n    return null;\n}\n\n// Function to format date\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    const year = date.getUTCFullYear();\n    const month = String(date.getUTCMonth() + 1).padStart(2, '0');\n    const day = String(date.getUTCDate()).padStart(2, '0');\n    const hours = String(date.getUTCHours()).padStart(2, '0');\n    const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n    const seconds = String(date.getUTCSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}:00Z`;\n}\n\n// Create a number formatter for 'de-DE' locale\nconst numberFormatter = new Intl.NumberFormat('de-DE', {\n    minimumFractionDigits: 0,\n    useGrouping: false\n});\n\n// Function to format numbers using Intl.NumberFormat\nfunction formatNumber(value) {\n    if (typeof value === 'number') {\n        return numberFormatter.format(value);\n    }\n    return value;\n}\n\nfunction formatGeoJson(value) {\n    return '\"' + value.replaceAll('\"', \"'\") + '\"'\n}\n\nfunction getYesterdayDate() {\n    const today = new Date();\n    today.setDate(today.getDate() - 1);\n    return today.toISOString().split('T')[0];\n}\n\n// Define CSV headers\nconst csvHeaders = 'id;name;type;dateobserved;location;atmosphericpressure;precipitation;relativehumidity;temperature;winddirection;windspeedavg;windspeedmax;windspeedmin';\n\n// Map query results to CSV lines\nconst csvLines = results.map(row => {\n    return [\n        row.id,\n        row.name,\n        row.type,\n        formatDate(row.dateobserved),\n        formatGeoJson(row.location),\n        formatNumber(row.atmosphericpressure),\n        formatNumber(row.precipitation),\n        formatNumber(row.relativehumidity),\n        formatNumber(row.temperature),\n        formatNumber(row.winddirection),\n        formatNumber(row.windspeedavg),\n        formatNumber(row.windspeedmax),\n        formatNumber(row.windspeedmin)\n    ].join(';');\n});\n\n// Combine headers and lines into a single CSV string\nconst csvContent = [csvHeaders, ...csvLines].join('\\r\\n');\n\n// Convert the CSV content to a Buffer\n//const csvBuffer = Buffer.from(csvContent, 'utf8');\n\n// Set the CSV file as the payload\nmsg.csvContent = csvContent;\n\n// Set the filename for the CSV file\nmsg.filename = `${msg.station.title}.csv`;\n\n// Set the appropriate content type for CSV\nmsg.headers = {\n    'Content-Type': 'text/csv',\n    'Content-Disposition': 'attachment; filename=\"' + msg.filename + '\"'\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1220,
        "wires": [
            [
                "9eb7fed954aade62"
            ]
        ]
    },
    {
        "id": "1df1d716e00620e3",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "88b1129479ec3ca1",
        "name": "Prepare POST",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\")\n\nconst datasetNodeId = flow.get(\"datasetNodeId\")\nconst resourceNodeId = msg.nid\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/datastore/' +  resourceNodeId +'/import'\nmsg.method = \"POST\"\n\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid, //sessionInfo.token,\n    'X-CSRF-Token': csrfToken\n}\n\nmsg.payload = {};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1500,
        "wires": [
            [
                "29325da99efccf85",
                "6b72bc271962b49d"
            ]
        ]
    },
    {
        "id": "29325da99efccf85",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "88b1129479ec3ca1",
        "name": "POST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 1500,
        "wires": [
            [
                "3c1e83f987616c5c"
            ]
        ]
    },
    {
        "id": "71c4e24e0b050ff1",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "88b1129479ec3ca1",
        "name": "resource attach response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1500,
        "wires": []
    },
    {
        "id": "3c1e83f987616c5c",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "88b1129479ec3ca1",
        "name": "Result",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: `Import successful: ${msg.payload[0]}` });\n} else {\n    node.status({fill:\"red\",shape:\"ring\",text:msg.payload[0]});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1500,
        "wires": [
            [
                "71c4e24e0b050ff1"
            ]
        ]
    },
    {
        "id": "8b35b894315f35d4",
        "type": "comment",
        "z": "39d92afff0d156f4",
        "g": "88b1129479ec3ca1",
        "name": "Link Doku",
        "info": "https://dkan.readthedocs.io/en/7.x-1.x/apis/rest-api.html#import-resource-file-into-datastore",
        "x": 560,
        "y": 1480,
        "wires": []
    },
    {
        "id": "c2efd610502d158a",
        "type": "inject",
        "z": "39d92afff0d156f4",
        "g": "0a470830db50cb31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1960,
        "wires": [
            [
                "89ee1b0786797aa7"
            ]
        ]
    },
    {
        "id": "89ee1b0786797aa7",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "0a470830db50cb31",
        "name": "Prepare GET",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\")\n\nconst datasetNodeId = flow.get(\"datasetNodeId\")\nconst resourceNodeId = 41497\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/datastore/' +  resourceNodeId \nmsg.method = \"GET\"\n\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid, //sessionInfo.token,\n    'X-CSRF-Token': csrfToken\n}\n\nmsg.payload = {};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1960,
        "wires": [
            [
                "7f4b2a6c7e0a9535"
            ]
        ]
    },
    {
        "id": "7f4b2a6c7e0a9535",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "0a470830db50cb31",
        "name": "GET",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 1960,
        "wires": [
            [
                "35b4b63d29d7e66c"
            ]
        ]
    },
    {
        "id": "35b4b63d29d7e66c",
        "type": "yaml",
        "z": "39d92afff0d156f4",
        "g": "0a470830db50cb31",
        "property": "payload",
        "name": "",
        "x": 790,
        "y": 1960,
        "wires": [
            [
                "5fb3f110d1d176fb"
            ]
        ]
    },
    {
        "id": "5fb3f110d1d176fb",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "0a470830db50cb31",
        "name": "debug 76",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1960,
        "wires": []
    },
    {
        "id": "bd69fc2348143711",
        "type": "inject",
        "z": "39d92afff0d156f4",
        "g": "3839d35226b92f3a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2060,
        "wires": [
            [
                "d42b88f66e0d40de"
            ]
        ]
    },
    {
        "id": "d42b88f66e0d40de",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "3839d35226b92f3a",
        "name": "Prepare GET",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\")\n\nconst datasetNodeId = flow.get(\"datasetNodeId\")\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/node/' + 42048\nmsg.method = \"GET\"\n\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid, //sessionInfo.token,\n    'X-CSRF-Token': csrfToken\n}\n\nmsg.payload = {};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 2060,
        "wires": [
            [
                "de2a151c9447669e"
            ]
        ]
    },
    {
        "id": "de2a151c9447669e",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "3839d35226b92f3a",
        "name": "GET",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 2060,
        "wires": [
            [
                "5576e262e627b3f3"
            ]
        ]
    },
    {
        "id": "4912b5361d16ab61",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "3839d35226b92f3a",
        "name": "uuid",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 2060,
        "wires": []
    },
    {
        "id": "5576e262e627b3f3",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "3839d35226b92f3a",
        "name": "Result",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: \"resource uuid: \" + msg.payload.uuid });\n}\n\nflow.set(\"resourceuuid\", msg.payload.uuid)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2060,
        "wires": [
            [
                "4912b5361d16ab61"
            ]
        ]
    },
    {
        "id": "eefd22bc44c80ee2",
        "type": "comment",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "Test DKAN Datastore API for ressource + Doku",
        "info": "https://dkan.readthedocs.io/en/7.x-1.x/apis/datastore-api.html#",
        "x": 260,
        "y": 1680,
        "wires": []
    },
    {
        "id": "fed908411b43dc9f",
        "type": "inject",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1740,
        "wires": [
            [
                "fbdadf5f291a154e"
            ]
        ]
    },
    {
        "id": "fbdadf5f291a154e",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "GET ",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\")\n\nconst datasetNodeId = flow.get(\"datasetNodeId\")\nconst resourceNodeId = 41497\nconst resourceNodeUUID = \"17cb551e-2a15-4d7a-b974-213bfe9807ac\"\n\nmsg.url = 'https://offenedaten-konstanz.de/api/action/datastore/search.json?resource_id=' + resourceNodeUUID\nmsg.method = \"GET\"\n\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    }\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1740,
        "wires": [
            [
                "ad7c2d7e8d9a90b0"
            ]
        ]
    },
    {
        "id": "8062212ff0650a6f",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "debug 77",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1740,
        "wires": []
    },
    {
        "id": "ad7c2d7e8d9a90b0",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 1740,
        "wires": [
            [
                "2424113be0f26e5a"
            ]
        ]
    },
    {
        "id": "2424113be0f26e5a",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "Result",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: \"ok\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1740,
        "wires": [
            [
                "8062212ff0650a6f"
            ]
        ]
    },
    {
        "id": "4cf8264182af04cd",
        "type": "comment",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "Test with fake csv",
        "info": "",
        "x": 160,
        "y": 2140,
        "wires": []
    },
    {
        "id": "846827593ee02b82",
        "type": "inject",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1860,
        "wires": [
            [
                "bfbbee17f7ae8f9e"
            ]
        ]
    },
    {
        "id": "bfbbee17f7ae8f9e",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "GET ",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\")\n\nconst datasetNodeId = flow.get(\"nodeId\")\nconst resourceNodeId = flow.get(\"resourceId\")\nconst resourceNodeUUID = flow.get(\"resourceuuid\")\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/datastore/' + resourceNodeId\nmsg.method = \"DELETE\"\n\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    }\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1860,
        "wires": [
            [
                "7dadd2741773197e"
            ]
        ]
    },
    {
        "id": "70e63a46e5c1e1f0",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "debug 78",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1860,
        "wires": []
    },
    {
        "id": "7dadd2741773197e",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 1860,
        "wires": [
            [
                "134db8b52c313c9c"
            ]
        ]
    },
    {
        "id": "134db8b52c313c9c",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "Result",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: \"ok\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1860,
        "wires": [
            [
                "70e63a46e5c1e1f0"
            ]
        ]
    },
    {
        "id": "55c85cd132f15ec2",
        "type": "comment",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "Delete file from datastore",
        "info": "",
        "x": 170,
        "y": 1820,
        "wires": []
    },
    {
        "id": "b053a2ae4f2aba89",
        "type": "comment",
        "z": "39d92afff0d156f4",
        "g": "e1f0eda674902441",
        "name": "Saves session info and token into variable sessionInfo",
        "info": "",
        "x": 280,
        "y": 200,
        "wires": []
    },
    {
        "id": "b712a8664b429c4e",
        "type": "comment",
        "z": "39d92afff0d156f4",
        "g": "e1f0eda674902441",
        "name": "Saves CSRF token variable csrfToken",
        "info": "",
        "x": 230,
        "y": 360,
        "wires": []
    },
    {
        "id": "ba3a16cd60ca7e17",
        "type": "inject",
        "z": "39d92afff0d156f4",
        "g": "23562a97683f4fc7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "b07b7bf6f90e7595"
            ]
        ]
    },
    {
        "id": "b07b7bf6f90e7595",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "23562a97683f4fc7",
        "name": "Prepare Login",
        "func": "const username = env.get(\"DKAN_PROD_USER\");\nconst password = env.get(\"DKAN_PROD_PASSWORD\");\n\nmsg.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n}\n\nmsg.payload = \"username=\" + encodeURIComponent(username) + \"&password=\" + encodeURIComponent(password);\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/user/login'\nmsg.method = \"POST\"\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 280,
        "wires": [
            [
                "d6c0c27915430176"
            ]
        ]
    },
    {
        "id": "d6c0c27915430176",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "23562a97683f4fc7",
        "name": "POST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 280,
        "wires": [
            [
                "6fa0bfceab4c5bec"
            ]
        ]
    },
    {
        "id": "768a9e1adc6a0635",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "23562a97683f4fc7",
        "name": "login response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 280,
        "wires": []
    },
    {
        "id": "6fa0bfceab4c5bec",
        "type": "yaml",
        "z": "39d92afff0d156f4",
        "g": "23562a97683f4fc7",
        "property": "payload",
        "name": "",
        "x": 770,
        "y": 280,
        "wires": [
            [
                "b88934d334fa11c7"
            ]
        ]
    },
    {
        "id": "b88934d334fa11c7",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "23562a97683f4fc7",
        "name": "Save session info in flow var",
        "func": "if(msg.statusCode == 200){\n    node.status({fill:\"green\",shape:\"ring\",text:\"Login successful\"});\n}\n\nflow.set(\"sessionInfo\", msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 280,
        "wires": [
            [
                "768a9e1adc6a0635",
                "6e2fd21cf149cb1a"
            ]
        ]
    },
    {
        "id": "6e2fd21cf149cb1a",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "9fe4aa23d62f409b",
        "name": "Prepare POST",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nmsg.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid\n}\n\nmsg.url = 'https://offenedaten-konstanz.de/services/session/token'\nmsg.method = \"POST\"\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 440,
        "wires": [
            [
                "6891af1ed41b4cef"
            ]
        ]
    },
    {
        "id": "6891af1ed41b4cef",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "9fe4aa23d62f409b",
        "name": "POST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 440,
        "wires": [
            [
                "b7aeb2f85d663348"
            ]
        ]
    },
    {
        "id": "89e5e16ae2830922",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "9fe4aa23d62f409b",
        "name": "csrf response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 440,
        "wires": []
    },
    {
        "id": "b7aeb2f85d663348",
        "type": "yaml",
        "z": "39d92afff0d156f4",
        "g": "9fe4aa23d62f409b",
        "property": "payload",
        "name": "",
        "x": 550,
        "y": 440,
        "wires": [
            [
                "fa5db7cae1ae1b21"
            ]
        ]
    },
    {
        "id": "fa5db7cae1ae1b21",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "9fe4aa23d62f409b",
        "name": "Save CSRF token in flow var",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: \"CSRF retrieved\" });\n}\n\nflow.set(\"csrfToken\", msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 440,
        "wires": [
            [
                "89e5e16ae2830922"
            ]
        ]
    },
    {
        "id": "4db2ab95b20f8131",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "446108a4de4fe5df",
        "name": "Prepare POST",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\")\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid, //sessionInfo.token,\n    'X-CSRF-Token': csrfToken\n}\n\nconst currentYear = new Date().getFullYear();\nmsg.datasetTitle = \"Wetterstationen Programm Smart Green City \" + currentYear\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/node/'\nmsg.method = \"POST\"\n\nconst body = {\n    \"type\": \"dataset\",\n    \"title\": msg.datasetTitle,\n    \"status\": \"1\",\n    \"body\": {\n        \"und\": [\n            { \n                \"format\": \"html\",\n                \"value\": '<p><strong>Wetterstationen Programm&nbsp;Smart Green City</strong></p> <p>Im Rahmen des Programms Smart Green City (<strong><a href=\"https://smart-green-city-konstanz.de/\">Startseite | Smart Green City Konstanz (smart-green-city-konstanz.de</a></strong>) sind in Konstanz an 12 verschiedenen Standorten Wetterstationen installiert, die in Echtzeit präzise stadtklimatische Parameter messen. Sie stellen eine wichtige Datengrundlage für die Stadtplanung dar.</p> <p>Dieser Datensatz&nbsp;enthält täglich aktualisierte&nbsp;Messwerte mit der zeitlichen Granularität 15min&nbsp;je Standort mit den Parametern relative Luftfeuchtigkeit, akkumulierter Niederschlag (bis 100mm), Luftdruck, Temperatur,&nbsp;Windrichtung und Windgeschwindigkeit (Durchschnitt, Minimum, Maximum seit letzer Beobachtung).</p> <p>Der Aufbau des Datensatzes sowie die Bezeichnungen der Felder entsprechen dem Standard der Smart Data Models. Weitere Details sind unter&nbsp;<a href=\"https://github.com/smart-data-models/dataModel.Weather/blob/master/WeatherObserved/doc/spec_DE.md\" target=\"_blank\"><strong>Smart Data Model - WeatherObserved</strong></a> einsehbar.</p> <p>Hinweis: Der Zeitstempel im Datensatz ist in UTC (koordiniertierte Weltzeit) angegeben.</p> <p>Die 12 Standorte sind:</p> <ul> <li>Bodanplatz</li> <li>Döbele</li> <li>Fähre Staad</li> <li>Friedrichstraße</li> <li>Herosé-Park</li> <li>Hörnle</li> <li>Mainaustraße</li> <li>Marktstätte</li> <li>Riedstraße</li> <li>Europapark</li> <li>Stadtgarten</li> <li>Stephansplatz</li> </ul> <p>Weitere Infos zum Programm Smart Green City und dem Projekt Klimadatenplattform gibt es hier:</p> <p><strong><a href=\"https://smart-green-city-konstanz.de/klimadatenplattform\">Klimadatenplattform | Smart Green City Konstanz (smart-green-city-konstanz.de)</a></strong></p> <p><strong>Quelle:&nbsp;</strong>Stadt Konstanz&nbsp;- Programm Smart Green City</p>'\n            }\n        ]\n    },\n    \"field_dcatapde_contributor\": {\n        \"und\": [\n            {\n                \"url\": \"https://offenedaten-konstanz.de/\",\n                \"title\": \"Team Offene Daten Stadt Konstanz\"\n            }\n        ]\n    },\n    \"field_dcatapde_maintainer\": {\n        \"und\": [\n            {\n                \"url\": \"https://offenedaten-konstanz.de/\",\n                \"title\": \"Team Offene Daten Stadt Konstanz\"\n            }\n        ]\n    },\n    \"field_dcatapde_originator\": {\n        \"und\": [\n            {\n                \"url\": \"https://www.konstanz.de/serviceportal/start.html\",\n                \"title\": \"Stadt Konstanz\"\n            }\n        ]\n    },\n    \"field_dcatapde_publisher\": {\n        \"und\": [\n            {\n                \"url\": \"https://offenedaten-konstanz.de/group/stadt-konstanz\",\n                \"title\": \"Team Offene Daten Stadt Konstanz\"\n            }\n        ]\n    },\n    \"field_dcatapde_theme\": {\n        \"und\": [\n            {\n                \"tid\": \"407\" // 407 seems to be \"Umwelt\"\n            }\n        ]\n    },\n    \"field_frequency\": {\n        \"und\": [\n            {\n                \"value\": \"R/P1D\"\n            }\n        ]\n    },\n    \"field_license\": {\n        \"und\": [\n            {\n                \"value\": \"cc-by\",\n                \"format\":null,\n                \"safe_value\": \"cc-by\"\n                }\n            ]\n    }\n    ,\n    \"field_public_access_level\": {\n        \"und\": [\n            {\n                \"value\": \"public\"\n            }\n        ]\n    }\n}\n\nmsg.payload = body\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "9cc12486380112b6"
            ]
        ]
    },
    {
        "id": "9cc12486380112b6",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "446108a4de4fe5df",
        "name": "POST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 80,
        "wires": [
            [
                "8b83f397fbcba82f"
            ]
        ]
    },
    {
        "id": "fcd6d97fb29443f2",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "446108a4de4fe5df",
        "name": "dataset response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 80,
        "wires": []
    },
    {
        "id": "8b83f397fbcba82f",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "446108a4de4fe5df",
        "name": "Save node ID into var and DB",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: \"created nid: \" + msg.payload.nid });\n}\n\nflow.set(\"datasetNodeId\", msg.payload.nid)\n\nmsg.query = `\n-- Create table\nCREATE TABLE IF NOT EXISTS mtweather.dkan_mapping (\n    id INT GENERATED BY DEFAULT AS IDENTITY,\n    entity_id VARCHAR(100),\n    resource_name VARCHAR(100),\n    nid INT,\n    uuid UUID\n);\n\n-- Insert data\nINSERT INTO mtweather.dkan_mapping (entity_id, resource_name, nid, uuid) VALUES\n(null,'${msg.datasetTitle}', ${msg.payload.nid}, null);\n`\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 80,
        "wires": [
            [
                "b383b941f77f0ae0"
            ]
        ]
    },
    {
        "id": "9c616b9bcdec7250",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "Build resource titles",
        "func": "const stations = []\n\nconst entities = msg.payload\n\nfor (const entity of entities) {\n    const name = entity.name.replaceAll(\" \", \"\")\n    const currentYear = new Date().getFullYear()\n    const currentMonth = (new Date().getMonth() + 1).toString().padStart(2, \"0\") // months start at 0 in JS, so e.g. January would be 0 + 1 = 1\n\n\n    const station = {\n        entityId: entity.entity_id,\n        title: `Wetterstation_${name}_${currentYear}_${currentMonth}`\n    }\n\n    stations.push(station)\n}\n\nmsg.payload = stations\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 640,
        "wires": [
            [
                "d28bf120ba445bd4"
            ]
        ]
    },
    {
        "id": "d28bf120ba445bd4",
        "type": "split",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1030,
        "y": 700,
        "wires": [
            [
                "8a363fc10cf07bf5"
            ]
        ]
    },
    {
        "id": "333b84bddec05435",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "7be90d830f0490a4",
        "name": "Prepare GET",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\")\n\nmsg.url = `https://offenedaten-konstanz.de/api/dataset/node/${flow.get('datasetNodeId')}`\nmsg.method = \"GET\"\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid, //sessionInfo.token,\n    'X-CSRF-Token': csrfToken\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1000,
        "wires": [
            [
                "cde4352d19af7419"
            ]
        ]
    },
    {
        "id": "cde4352d19af7419",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "7be90d830f0490a4",
        "name": "GET",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1170,
        "y": 1000,
        "wires": [
            [
                "1b7dd6a012491607"
            ]
        ]
    },
    {
        "id": "1b7dd6a012491607",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "7be90d830f0490a4",
        "name": "Extract current resources",
        "func": "const currentResourcesArray = msg.payload.field_resources.und;\n\nmsg.currentResourcesArray = currentResourcesArray;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1000,
        "wires": [
            [
                "5e1e93db54c45325"
            ]
        ]
    },
    {
        "id": "8a363fc10cf07bf5",
        "type": "delay",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1220,
        "y": 700,
        "wires": [
            [
                "4b01f3b4899e1683"
            ]
        ]
    },
    {
        "id": "4b01f3b4899e1683",
        "type": "switch",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "upload_file",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "create_resource",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1030,
        "y": 760,
        "wires": [
            [
                "832cf50bf0cbb903"
            ],
            [
                "6230d0eac3c6fa4b"
            ]
        ]
    },
    {
        "id": "832cf50bf0cbb903",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "aeb9a00e3d46a9b1",
        "name": "Prepare query",
        "func": "msg.station = msg.payload\n\nmsg.query = `\nset timezone='EUROPE/Berlin';\n\nSELECT\n    entity_id as \"id\",\n    \"name\",\n    entity_type as \"type\",\n    dateobserved,\n    ST_AsGeoJSON(location) as \"location\",\n    atmosphericpressure,\n    precipitation,\n    relativehumidity,\n    temperature,\n    winddirection,\n    windspeedavg,\n    windspeedmax,\n    windspeedmin    \nFROM mtweather.etweatherobserved\nWHERE dateobserved >= date_trunc('month', now())\n      AND dateobserved < date_trunc('month', now()) + interval '1 month'\nAND entity_id = '${msg.payload.entityId}'\n\n`\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1220,
        "wires": [
            [
                "53a136bd7f817292"
            ]
        ]
    },
    {
        "id": "9eb7fed954aade62",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "aeb9a00e3d46a9b1",
        "name": "Prepare query",
        "func": "msg.query = `\n\nselect nid from mtweather.dkan_mapping\nwhere resource_name = '${msg.station.title}'\n\n`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1300,
        "wires": [
            [
                "9e4e595636b20a2c"
            ]
        ]
    },
    {
        "id": "f82c06edc070d262",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "aeb9a00e3d46a9b1",
        "name": "nid and data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 1360,
        "wires": []
    },
    {
        "id": "9fad9743e67e5799",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "Prepare query",
        "func": "const currentYear = new Date().getFullYear();\n\n// tmp workaround while old dataset doesn't contain year in title\nif(currentYear == 2024){\n    msg.datasetTitle = \"Wetterstationen Programm Smart Green City\"\n} else {\n    msg.datasetTitle = \"Wetterstationen Programm Smart Green City \" + currentYear\n}\n\nmsg.query = `\n\nselect nid from mtweather.dkan_mapping\nwhere resource_name = '${msg.datasetTitle}'\n\n`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 680,
        "wires": [
            [
                "1cd60c1b1f0a4fa8"
            ]
        ]
    },
    {
        "id": "e04610e11257ccc9",
        "type": "change",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datasetNodeId",
                "pt": "flow",
                "to": "payload[0].nid",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "delete",
                "p": "query",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 780,
        "wires": [
            [
                "60a08e98832f9b46"
            ]
        ]
    },
    {
        "id": "9563299cf89fd6bb",
        "type": "comment",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "we don't want to crash DKAN",
        "info": "",
        "x": 1420,
        "y": 680,
        "wires": []
    },
    {
        "id": "7735666b8a6611f5",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "debug 80",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 800,
        "wires": []
    },
    {
        "id": "4f74ad5e5977306f",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "debug 81",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 800,
        "wires": []
    },
    {
        "id": "6b72bc271962b49d",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "debug 82",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 1600,
        "wires": []
    },
    {
        "id": "b28fd93e72eb1b58",
        "type": "cronplus",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "daily at 4am",
        "outputField": "cronplus",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "daily",
                "topic": "upload_file",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 4 * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 150,
        "y": 640,
        "wires": [
            [
                "9fad9743e67e5799"
            ]
        ]
    },
    {
        "id": "f1444af0b1e65b61",
        "type": "cronplus",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "monthly at 3am",
        "outputField": "cronplus",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "monthly",
                "topic": "create_resource",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 3 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 700,
        "wires": [
            [
                "9fad9743e67e5799"
            ]
        ]
    },
    {
        "id": "5a9e4e1b883f1b51",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "d9aa0959288a3d57",
        "name": "Prepare POST",
        "func": "function getYesterdayDate() {\n    const today = new Date();\n    today.setDate(today.getDate() - 1);\n    return today.toISOString().split('T')[0];\n}\n\nmsg.station = msg.payload\n\nconst sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\");\nconst datenow = new Date().toISOString().split('T')[0]\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/node'\nmsg.method = \"POST\"\n\n\nconst body = {\n    \"type\": \"resource\",\n    \"title\": msg.payload.title,\n    \"status\": \"1\",\n        \"body\": {\n            \"und\": [\n                {\n                    \"value\": \"\"\n                }\n            ]\n    },\n    \"field_dcatapde_license\": {\n        \"und\": [{ \"tid\": \"490\" }] // 490 seems to be cc-by/4.0 license\n    },\n    \"field_format\": {\n        \"und\": [{ \"tid\": \"69\" }] // 69 == csv\n    }\n\n}\n\n\nmsg.payload = body\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid, //sessionInfo.token,\n    'X-CSRF-Token': csrfToken\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3240,
        "y": 900,
        "wires": [
            [
                "ce44eac50555a79d"
            ]
        ]
    },
    {
        "id": "ce44eac50555a79d",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "d9aa0959288a3d57",
        "name": "POST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 3450,
        "y": 900,
        "wires": [
            [
                "4f7109d69f783cca"
            ]
        ]
    },
    {
        "id": "dff95f4b730d70f0",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "d9aa0959288a3d57",
        "name": "resource response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4130,
        "y": 900,
        "wires": []
    },
    {
        "id": "4f7109d69f783cca",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "d9aa0959288a3d57",
        "name": "Save node/resource ID into DB",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: \"created nid: \" + msg.payload.nid });\n}\n\nmsg.nid = msg.payload.nid\n\nconst entityId = msg.station.entityId\nconst title = msg.station.title\n\nmsg.query = `\n-- Create table\nCREATE TABLE IF NOT EXISTS mtweather.dkan_mapping (\n    id INT GENERATED BY DEFAULT AS IDENTITY,\n    entity_id VARCHAR(100),\n    resource_name VARCHAR(100),\n    nid INT,\n    uuid UUID\n);\n\n-- Insert data\nINSERT INTO mtweather.dkan_mapping (entity_id, resource_name, nid, uuid) VALUES\n('${entityId}','${title}', ${msg.nid}, null);\n`\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3650,
        "y": 900,
        "wires": [
            [
                "b04c426437af3767",
                "5366a362da07a399"
            ]
        ]
    },
    {
        "id": "7dcf60a5f750e806",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "081d3baef8a50cc9",
        "name": "Prepare POST",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\");\n\nmsg.nid = msg.payload[0].nid\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/node/' + msg.nid + '/attach_file';\nmsg.method = \"POST\";\n\n// Get the CSV content and filename from msg.payload\n//const csvContent = msg.payload.toString('utf8');\nconst csvContent = msg.csvContent\nconst fileName = msg.filename;\n\n// Constants for generating multipart/form-data\nconst boundary = '--multipart-boundary-' + Math.random().toString().substring(2);\nconst crlf = '\\r\\n';\nconst delimiter = '--' + boundary;\n\n// Build the multipart/form-data payload\nlet payload = '';\npayload += delimiter + crlf;\npayload += 'Content-Disposition: form-data; name=\"attach\"' + crlf + crlf;\npayload += '0' + crlf; // set attach to 0 to replace existing file\npayload += delimiter + crlf;\npayload += 'Content-Disposition: form-data; name=\"field_name\"' + crlf + crlf;\npayload += 'field_upload' + crlf;\npayload += delimiter + crlf;\npayload += 'Content-Disposition: form-data; name=\"files[1]\"; filename=\"' + fileName + '\"' + crlf;\npayload += 'Content-Type: text/csv' + crlf + crlf;\npayload += csvContent + crlf;\npayload += delimiter + '--' + crlf;\n\nmsg.headers = {\n    'Content-Type': 'multipart/form-data; boundary=' + boundary,\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid,\n    'X-CSRF-Token': csrfToken\n};\n\nmsg.payload = Buffer.from(payload, 'utf8');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2780,
        "y": 1300,
        "wires": [
            [
                "064f5aaa2dacc81b"
            ]
        ]
    },
    {
        "id": "064f5aaa2dacc81b",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "081d3baef8a50cc9",
        "name": "POST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2970,
        "y": 1300,
        "wires": [
            [
                "c2bdd1ad9e07b94e"
            ]
        ]
    },
    {
        "id": "13ea002a5d527ee8",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "081d3baef8a50cc9",
        "name": "file attach response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3330,
        "y": 1300,
        "wires": []
    },
    {
        "id": "c2bdd1ad9e07b94e",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "081d3baef8a50cc9",
        "name": "Result",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: \"created fid: \" + msg.payload[0].fid });\n} else {\n    node.status({fill:\"red\",shape:\"ring\",text:msg.payload[0]});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3110,
        "y": 1300,
        "wires": [
            [
                "13ea002a5d527ee8",
                "8a55f0f6dd06b2c5"
            ]
        ]
    },
    {
        "id": "6f96deaf5f81eed8",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "081d3baef8a50cc9",
        "name": "query_result_to_csv",
        "func": "// Get the query results\nconst results = msg.payload;\n\n// Check if results are available\nif (!results || results.length === 0) {\n    node.error(\"No results returned from query\", msg);\n    return null;\n}\n\n// Function to format date\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    const year = date.getUTCFullYear();\n    const month = String(date.getUTCMonth() + 1).padStart(2, '0');\n    const day = String(date.getUTCDate()).padStart(2, '0');\n    const hours = String(date.getUTCHours()).padStart(2, '0');\n    const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n    const seconds = String(date.getUTCSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}:00Z`;\n}\n\n// Create a number formatter for 'de-DE' locale\nconst numberFormatter = new Intl.NumberFormat('de-DE', {\n    minimumFractionDigits: 0,\n    useGrouping: false\n});\n\n// Function to format numbers using Intl.NumberFormat\nfunction formatNumber(value) {\n    if (typeof value === 'number') {\n        return numberFormatter.format(value);\n    }\n    return value;\n}\n\nfunction formatGeoJson(value) {\n    return '\"' + value.replaceAll('\"', \"'\") + '\"'\n}\n\nfunction getYesterdayDate() {\n    const today = new Date();\n    today.setDate(today.getDate() - 1);\n    return today.toISOString().split('T')[0];\n}\n\n// Define CSV headers\nconst csvHeaders = 'id;name;type;dateobserved;location;atmosphericpressure;precipitation;relativehumidity;temperature;winddirection;windspeedavg;windspeedmax;windspeedmin';\n\n// Map query results to CSV lines\nconst csvLines = results.map(row => {\n    return [\n        row.id,\n        row.name,\n        row.type,\n        formatDate(row.dateobserved),\n        formatGeoJson(row.location),\n        formatNumber(row.atmosphericpressure),\n        formatNumber(row.precipitation),\n        formatNumber(row.relativehumidity),\n        formatNumber(row.temperature),\n        formatNumber(row.winddirection),\n        formatNumber(row.windspeedavg),\n        formatNumber(row.windspeedmax),\n        formatNumber(row.windspeedmin)\n    ].join(';');\n});\n\n// Combine headers and lines into a single CSV string\nconst csvContent = [csvHeaders, ...csvLines].join('\\n');\n\n// Convert the CSV content to a Buffer\n//const csvBuffer = Buffer.from(csvContent, 'utf8');\n\n// Set the CSV file as the payload\nmsg.csvContent = csvContent;\n\n// Set the filename for the CSV file\nmsg.filename = `${msg.station.title}.csv`;\n\n// Set the appropriate content type for CSV\nmsg.headers = {\n    'Content-Type': 'text/csv',\n    'Content-Disposition': 'attachment; filename=\"' + msg.filename + '\"'\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2800,
        "y": 1220,
        "wires": [
            [
                "d295495ea4252595"
            ]
        ]
    },
    {
        "id": "e59a2dc3cc0ccd5d",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "081d3baef8a50cc9",
        "name": "Prepare query",
        "func": "msg.station = msg.payload\n\nconst month = (msg.month).toString().padStart(2, \"0\"); // ensures month is MM\n\nconst date = `${msg.year}-${msg.month}-01`\n\nmsg.query = `\nset timezone='EUROPE/Berlin';\n\nSELECT\n    entity_id as \"id\",\n    \"name\",\n    entity_type as \"type\",\n    dateobserved,\n    ST_AsGeoJSON(location) as \"location\",\n    atmosphericpressure,\n    precipitation,\n    relativehumidity,\n    temperature,\n    winddirection,\n    windspeedavg,\n    windspeedmax,\n    windspeedmin    \nFROM mtweather.etweatherobserved\nWHERE dateobserved >= DATE '${date}'\n      AND dateobserved < DATE '${date}' + interval '1 month'\nAND entity_id = '${msg.payload.entityId}'\n\n`\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 1220,
        "wires": [
            [
                "550a3d21d0859043"
            ]
        ]
    },
    {
        "id": "d295495ea4252595",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "081d3baef8a50cc9",
        "name": "Prepare query",
        "func": "msg.query = `\n\nselect nid from mtweather.dkan_mapping\nwhere resource_name = '${msg.station.title}'\n\n`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 1300,
        "wires": [
            [
                "788e88d220301421"
            ]
        ]
    },
    {
        "id": "e9a4def497f171f6",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "081d3baef8a50cc9",
        "name": "nid and data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2650,
        "y": 1360,
        "wires": []
    },
    {
        "id": "8a55f0f6dd06b2c5",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "df621c2b328d6d97",
        "name": "Prepare POST",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\")\n\nconst datasetNodeId = flow.get(\"datasetNodeId\")\nconst resourceNodeId = msg.nid\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/datastore/' + resourceNodeId + '/import'\nmsg.method = \"POST\"\n\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid, //sessionInfo.token,\n    'X-CSRF-Token': csrfToken\n}\n\nmsg.payload = {};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 1500,
        "wires": [
            [
                "649d6acbb44d8a49"
            ]
        ]
    },
    {
        "id": "649d6acbb44d8a49",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "df621c2b328d6d97",
        "name": "POST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2630,
        "y": 1500,
        "wires": [
            [
                "897c45e03b77992c"
            ]
        ]
    },
    {
        "id": "afed2e885da729fc",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "df621c2b328d6d97",
        "name": "resource attach response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3290,
        "y": 1500,
        "wires": []
    },
    {
        "id": "897c45e03b77992c",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "df621c2b328d6d97",
        "name": "Result",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: `Import successful: ${msg.payload[0]}` });\n} else {\n    node.status({fill:\"red\",shape:\"ring\",text:msg.payload[0]});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2950,
        "y": 1500,
        "wires": [
            [
                "afed2e885da729fc"
            ]
        ]
    },
    {
        "id": "f5e36aefe30a0649",
        "type": "comment",
        "z": "39d92afff0d156f4",
        "g": "df621c2b328d6d97",
        "name": "Link Doku",
        "info": "https://dkan.readthedocs.io/en/7.x-1.x/apis/rest-api.html#import-resource-file-into-datastore",
        "x": 2780,
        "y": 1480,
        "wires": []
    },
    {
        "id": "2270dca6a02d3697",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "606044d65891eef5",
        "name": "Prepare PUT",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\")\n\nconst datasetNodeId = flow.get(\"datasetNodeId\")\nconst resourceNodeId = msg.nid\n\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/node/' +  datasetNodeId\nmsg.method = \"PUT\"\n\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid, //sessionInfo.token,\n    'X-CSRF-Token': csrfToken\n}\n\nif(msg.currentResourcesArray)\n{\n    msg.payload = {\n        \"field_resources\": {\n            \"und\": [\n                {\n                    \"target_id\": resourceNodeId\n                },\n                ...msg.currentResourcesArray\n            ]\n        }\n    };\n}else {\n    msg.payload = {\n        \"field_resources\": {\n            \"und\": [\n                {\n                    \"target_id\": resourceNodeId\n                }\n            ]\n        }\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 1000,
        "wires": [
            [
                "007d0ac6fd8a1de6",
                "d2126f4c3e1aaa76"
            ]
        ]
    },
    {
        "id": "007d0ac6fd8a1de6",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "606044d65891eef5",
        "name": "PUT",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 3990,
        "y": 1000,
        "wires": [
            [
                "32726e1604ac0f34"
            ]
        ]
    },
    {
        "id": "55f0e3d79dfa8a4e",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "606044d65891eef5",
        "name": "resource attach response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4190,
        "y": 1060,
        "wires": []
    },
    {
        "id": "32726e1604ac0f34",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "606044d65891eef5",
        "name": "Result",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: `Update nid ${msg.payload.nid} successful.` });\n} else {\n    node.status({fill:\"red\",shape:\"ring\",text:msg.payload[0]});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3990,
        "y": 1060,
        "wires": [
            [
                "55f0e3d79dfa8a4e"
            ]
        ]
    },
    {
        "id": "b04c426437af3767",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "606044d65891eef5",
        "name": "Prepare GET",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\")\n\nmsg.url = `https://offenedaten-konstanz.de/api/dataset/node/${flow.get('datasetNodeId')}`\nmsg.method = \"GET\"\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid, //sessionInfo.token,\n    'X-CSRF-Token': csrfToken\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3230,
        "y": 1000,
        "wires": [
            [
                "893500cf99ef210a",
                "b32b9725913792ad"
            ]
        ]
    },
    {
        "id": "893500cf99ef210a",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "606044d65891eef5",
        "name": "GET",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 3390,
        "y": 1000,
        "wires": [
            [
                "1c2bdebbe7398c66"
            ]
        ]
    },
    {
        "id": "1c2bdebbe7398c66",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "606044d65891eef5",
        "name": "Extract current resources",
        "func": "const currentResourcesArray = msg.payload.field_resources.und;\n\nmsg.currentResourcesArray = currentResourcesArray;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3590,
        "y": 1000,
        "wires": [
            [
                "2270dca6a02d3697"
            ]
        ]
    },
    {
        "id": "4f01eb7ed5d6dda2",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "086535801c0646b6",
        "name": "Build resource titles",
        "func": "const stations = []\n\nconst entities = msg.payload\n\nfor (const entity of entities) {\n    const name = entity.name.replaceAll(\" \", \"\")\n    const currentYear = msg.year\n    const currentMonth = (msg.month).toString().padStart(2, \"0\");\n\n\n    const station = {\n        entityId: entity.entity_id,\n        title: `Wetterstation_${name}_${currentYear}_${currentMonth}`\n    }\n\n    stations.push(station)\n}\n\nmsg.payload = stations\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3290,
        "y": 640,
        "wires": [
            [
                "0dc8930f2f8d462d"
            ]
        ]
    },
    {
        "id": "0dc8930f2f8d462d",
        "type": "split",
        "z": "39d92afff0d156f4",
        "g": "086535801c0646b6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 3250,
        "y": 700,
        "wires": [
            [
                "23355b3868550150"
            ]
        ]
    },
    {
        "id": "0c0f89aac9054d81",
        "type": "inject",
        "z": "39d92afff0d156f4",
        "g": "086535801c0646b6",
        "name": "create datasets",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2380,
        "y": 640,
        "wires": [
            [
                "3e52a0de31df6e07"
            ]
        ]
    },
    {
        "id": "23355b3868550150",
        "type": "delay",
        "z": "39d92afff0d156f4",
        "g": "086535801c0646b6",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3440,
        "y": 700,
        "wires": [
            [
                "07682dd6a76e1993"
            ]
        ]
    },
    {
        "id": "2d821cc198a20128",
        "type": "inject",
        "z": "39d92afff0d156f4",
        "g": "086535801c0646b6",
        "name": "upload files",
        "props": [
            {
                "p": "upload_file",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2370,
        "y": 680,
        "wires": [
            [
                "3e52a0de31df6e07"
            ]
        ]
    },
    {
        "id": "07682dd6a76e1993",
        "type": "switch",
        "z": "39d92afff0d156f4",
        "g": "086535801c0646b6",
        "name": "",
        "property": "upload_file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3250,
        "y": 760,
        "wires": [
            [
                "e59a2dc3cc0ccd5d"
            ],
            [
                "5a9e4e1b883f1b51"
            ]
        ]
    },
    {
        "id": "553be67eae399936",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "086535801c0646b6",
        "name": "Prepare query",
        "func": "msg.query = `\n\nselect nid from mtweather.dkan_mapping\nwhere resource_name = '${msg.datasetTitle}'\n\n`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2380,
        "y": 780,
        "wires": [
            [
                "6b886ca41b96ee22"
            ]
        ]
    },
    {
        "id": "09ba7a0f976cfd88",
        "type": "change",
        "z": "39d92afff0d156f4",
        "g": "086535801c0646b6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datasetNodeId",
                "pt": "flow",
                "to": "payload[0].nid",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "delete",
                "p": "query",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2830,
        "y": 780,
        "wires": [
            [
                "0a4889120da9b102"
            ]
        ]
    },
    {
        "id": "3e52a0de31df6e07",
        "type": "change",
        "z": "39d92afff0d156f4",
        "g": "086535801c0646b6",
        "name": "set month and year",
        "rules": [
            {
                "t": "set",
                "p": "datasetTitle",
                "pt": "msg",
                "to": "Wetterstationen Programm Smart Green City",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "month",
                "pt": "msg",
                "to": "6",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "year",
                "pt": "msg",
                "to": "2024",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2630,
        "y": 680,
        "wires": [
            [
                "553be67eae399936"
            ]
        ]
    },
    {
        "id": "1b074e57505c7f01",
        "type": "comment",
        "z": "39d92afff0d156f4",
        "g": "086535801c0646b6",
        "name": "we don't want to crash DKAN",
        "info": "",
        "x": 3640,
        "y": 680,
        "wires": []
    },
    {
        "id": "d2126f4c3e1aaa76",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "606044d65891eef5",
        "name": "debug 84",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3720,
        "y": 1060,
        "wires": []
    },
    {
        "id": "b32b9725913792ad",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "606044d65891eef5",
        "name": "debug 85",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3340,
        "y": 1060,
        "wires": []
    },
    {
        "id": "1be955a43d8214fd",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "b5c95d5e7650c05c",
        "name": "Prepare PUT",
        "func": "const sessionInfo = flow.get(\"sessionInfo\");\nconst csrfToken = flow.get(\"csrfToken\")\n\nconst datasetNodeId = flow.get(\"datasetNodeId\")\nconst resourceNodeId = msg.nid\n\n//msg.url = 'https://offenedaten-konstanz.de/api/dataset/node/42048'\nmsg.url = 'https://offenedaten-konstanz.de/api/dataset/node/42131'\nmsg.method = \"PUT\"\n\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Cookie': sessionInfo.session_name + '=' + sessionInfo.sessid, //sessionInfo.token,\n    'X-CSRF-Token': csrfToken\n}\n\n//msg.payload = {\n//    \"field_resources\": { \"und\": [{ \"target_id\": \"42060\" },{\"target_id\":\"42059\"},{\"target_id\":\"42058\"},{\"target_id\":\"42057\"},{\"target_id\":\"42056\"},{\"target_id\":\"42055\"},{\"target_id\":\"42054\"},{\"target_id\":\"42053\"},{\"target_id\":\"42052\"},{\"target_id\":\"42051\"},{\"target_id\":\"42050\"},{\"target_id\":\"42049\"}]}\n//}\n\nmsg.payload = {\n    \"field_dcatapde_theme\": {\"en\":[{\"tid\":\"407\"}]}\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 1240,
        "wires": [
            [
                "64bd2cfda0f358f1",
                "838fca3b1056eb42"
            ]
        ]
    },
    {
        "id": "64bd2cfda0f358f1",
        "type": "http request",
        "z": "39d92afff0d156f4",
        "g": "b5c95d5e7650c05c",
        "name": "PUT",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 3990,
        "y": 1240,
        "wires": [
            [
                "638709fc3fc6d241"
            ]
        ]
    },
    {
        "id": "638709fc3fc6d241",
        "type": "function",
        "z": "39d92afff0d156f4",
        "g": "b5c95d5e7650c05c",
        "name": "Result",
        "func": "if (msg.statusCode == 200) {\n    node.status({ fill: \"green\", shape: \"ring\", text: `Update nid ${msg.payload.nid} successful.` });\n} else {\n    node.status({fill:\"red\",shape:\"ring\",text:msg.payload[0]});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3990,
        "y": 1300,
        "wires": [
            [
                "15e2de6795a5deb3"
            ]
        ]
    },
    {
        "id": "838fca3b1056eb42",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "b5c95d5e7650c05c",
        "name": "debug 86",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3720,
        "y": 1300,
        "wires": []
    },
    {
        "id": "15e2de6795a5deb3",
        "type": "debug",
        "z": "39d92afff0d156f4",
        "g": "b5c95d5e7650c05c",
        "name": "resource attach response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4190,
        "y": 1300,
        "wires": []
    },
    {
        "id": "efa8b8f50ff60f81",
        "type": "inject",
        "z": "39d92afff0d156f4",
        "g": "b5c95d5e7650c05c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3620,
        "y": 1220,
        "wires": [
            [
                "1be955a43d8214fd"
            ]
        ]
    },
    {
        "id": "7bcc31bc8ad9e280",
        "type": "cronplus",
        "z": "39d92afff0d156f4",
        "g": "446108a4de4fe5df",
        "name": "01.01. at 2am",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 2 1 1 *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "4db2ab95b20f8131"
            ]
        ]
    },
    {
        "id": "53a136bd7f817292",
        "type": "postgresql",
        "z": "39d92afff0d156f4",
        "g": "aeb9a00e3d46a9b1",
        "name": "Get data",
        "query": "",
        "postgreSQLConfig": "ac23893feae710f1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 360,
        "y": 1220,
        "wires": [
            [
                "a147ab13e7b27e4a"
            ]
        ]
    },
    {
        "id": "60a08e98832f9b46",
        "type": "postgresql",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "Get entities and names",
        "query": "select distinct entity_id, name from mtweather.etweatherobserved\nwhere entity_id not like '%wintersense%'",
        "postgreSQLConfig": "ac23893feae710f1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 810,
        "y": 640,
        "wires": [
            [
                "9c616b9bcdec7250"
            ]
        ]
    },
    {
        "id": "8283f42a5576d27f",
        "type": "postgresql",
        "z": "39d92afff0d156f4",
        "g": "7bb3aaa08da47370",
        "name": "",
        "query": "",
        "postgreSQLConfig": "ac23893feae710f1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1690,
        "y": 900,
        "wires": [
            [
                "0fe6c574b9649839"
            ]
        ]
    },
    {
        "id": "9e4e595636b20a2c",
        "type": "postgresql",
        "z": "39d92afff0d156f4",
        "g": "aeb9a00e3d46a9b1",
        "name": "Get NID",
        "query": "",
        "postgreSQLConfig": "ac23893feae710f1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 360,
        "y": 1300,
        "wires": [
            [
                "bd3b9181f0ef6a84",
                "f82c06edc070d262"
            ]
        ]
    },
    {
        "id": "1cd60c1b1f0a4fa8",
        "type": "postgresql",
        "z": "39d92afff0d156f4",
        "g": "272f900e4c2441df",
        "name": "Get dataset NID",
        "query": "",
        "postgreSQLConfig": "ac23893feae710f1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 780,
        "wires": [
            [
                "e04610e11257ccc9"
            ]
        ]
    },
    {
        "id": "b383b941f77f0ae0",
        "type": "postgresql",
        "z": "39d92afff0d156f4",
        "g": "446108a4de4fe5df",
        "name": "",
        "query": "",
        "postgreSQLConfig": "ac23893feae710f1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1050,
        "y": 80,
        "wires": [
            [
                "fcd6d97fb29443f2"
            ]
        ]
    },
    {
        "id": "5366a362da07a399",
        "type": "postgresql",
        "z": "39d92afff0d156f4",
        "g": "d9aa0959288a3d57",
        "name": "",
        "query": "",
        "postgreSQLConfig": "ac23893feae710f1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 3910,
        "y": 900,
        "wires": [
            [
                "dff95f4b730d70f0"
            ]
        ]
    },
    {
        "id": "550a3d21d0859043",
        "type": "postgresql",
        "z": "39d92afff0d156f4",
        "g": "081d3baef8a50cc9",
        "name": "Get data",
        "query": "",
        "postgreSQLConfig": "ac23893feae710f1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2620,
        "y": 1220,
        "wires": [
            [
                "6f96deaf5f81eed8"
            ]
        ]
    },
    {
        "id": "788e88d220301421",
        "type": "postgresql",
        "z": "39d92afff0d156f4",
        "g": "081d3baef8a50cc9",
        "name": "Get NID",
        "query": "",
        "postgreSQLConfig": "ac23893feae710f1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2580,
        "y": 1300,
        "wires": [
            [
                "7dcf60a5f750e806",
                "e9a4def497f171f6"
            ]
        ]
    },
    {
        "id": "0a4889120da9b102",
        "type": "postgresql",
        "z": "39d92afff0d156f4",
        "g": "086535801c0646b6",
        "name": "Get entities and names",
        "query": "select distinct entity_id, name from mtweather.etweatherobserved\nwhere entity_id not like '%wintersense%'",
        "postgreSQLConfig": "ac23893feae710f1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 3030,
        "y": 640,
        "wires": [
            [
                "4f01eb7ed5d6dda2"
            ]
        ]
    },
    {
        "id": "6b886ca41b96ee22",
        "type": "postgresql",
        "z": "39d92afff0d156f4",
        "g": "086535801c0646b6",
        "name": "Get dataset NID",
        "query": "",
        "postgreSQLConfig": "ac23893feae710f1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2600,
        "y": 780,
        "wires": [
            [
                "09ba7a0f976cfd88"
            ]
        ]
    },
    {
        "id": "85ceb161e5d0d4db",
        "type": "http request",
        "z": "06d7c31d0c65ced0",
        "g": "4b9d98d3b233bad0",
        "name": "http POST Request",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 240,
        "wires": [
            [
                "9c3b76bdae064a99"
            ]
        ]
    },
    {
        "id": "5252da0a3b5d24ab",
        "type": "inject",
        "z": "06d7c31d0c65ced0",
        "g": "4b9d98d3b233bad0",
        "name": "Go!",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "e4c1c432b5a7bde4"
            ]
        ]
    },
    {
        "id": "9c3b76bdae064a99",
        "type": "debug",
        "z": "06d7c31d0c65ced0",
        "g": "4b9d98d3b233bad0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 240,
        "wires": []
    },
    {
        "id": "bc15c0467419ddd9",
        "type": "function",
        "z": "06d7c31d0c65ced0",
        "g": "4b9d98d3b233bad0",
        "name": "Setup Request",
        "func": "msg.url = env.get(\"STELLIO_API_URL\");\nmsg.url += \"/ngsi-ld/v1/subscriptions\";\n\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get('FIWARE_SERVICE');\n\nmsg.payload = {\n   \t\"type\": \"Subscription\",\n\t\"subscriptionName\": \"Subscription for entity type \" + msg.dataModel + \".\",\n\t\"description\": \"This subscription triggers everytime an entity from type \" + msg.dataModel + \" is updated. Only watching attribute dateIssued to avoid duplications.\",\n   \t\"entities\": [\n\t\t{\n\t\t\t\"type\": msg.dataModel\n   \t\t}\n\t],\n    \"watchedAttributes\": [\"dateIssued\"],\n\t\"notificationTrigger\": [\"entityCreated\", \"attributeCreated\", \"attributeUpdated\"],\n    \"notification\": {\n       \t\"format\": \"normalized\",\n       \t\"endpoint\": {\n\t\t\t\t  \"uri\": \"http://quantumleap-ld.prd-ngsi-stack.svc.cluster.local:8668/v2/notify\",\n          \t\"accept\": \"application/json\"\n       \t}\n    },\n    \"@context\": [\n        \"https://context.udp-kn.de/main-context.jsonld\"\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 240,
        "wires": [
            [
                "85ceb161e5d0d4db"
            ]
        ]
    },
    {
        "id": "e8a07ecd024d5822",
        "type": "function",
        "z": "06d7c31d0c65ced0",
        "g": "4b9d98d3b233bad0",
        "name": "Check if already exists",
        "func": "msg.sub_exists = false;\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const type = msg.payload[i].entities[0].type;\n\n    if (type.includes(msg.dataModel)){\n        msg.sub_exists = true;\n        node.warn(\"There is already a subscription for this type.\")\n        break;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 120,
        "wires": [
            [
                "edcc142ca7eb9afc"
            ]
        ]
    },
    {
        "id": "e4c1c432b5a7bde4",
        "type": "function",
        "z": "06d7c31d0c65ced0",
        "g": "4b9d98d3b233bad0",
        "name": "Setup GET Request",
        "func": "msg.url = env.get(\"STELLIO_API_URL\");\nmsg.url += \"/ngsi-ld/v1/subscriptions/?limit=100\";\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get('FIWARE_SERVICE');\nmsg.dataModel = \"WeatherForecast\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 120,
        "wires": [
            [
                "1a88500f8db47aea"
            ]
        ]
    },
    {
        "id": "1a88500f8db47aea",
        "type": "http request",
        "z": "06d7c31d0c65ced0",
        "g": "4b9d98d3b233bad0",
        "name": "http GET Request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 120,
        "wires": [
            [
                "e8a07ecd024d5822"
            ]
        ]
    },
    {
        "id": "edcc142ca7eb9afc",
        "type": "switch",
        "z": "06d7c31d0c65ced0",
        "g": "4b9d98d3b233bad0",
        "name": "",
        "property": "sub_exists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 180,
        "wires": [
            [
                "35222a2ef962eb31"
            ],
            [
                "bc15c0467419ddd9"
            ]
        ]
    },
    {
        "id": "35222a2ef962eb31",
        "type": "debug",
        "z": "06d7c31d0c65ced0",
        "g": "4b9d98d3b233bad0",
        "name": "debug 60",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 180,
        "wires": []
    },
    {
        "id": "29432c5f74f85fdf",
        "type": "inject",
        "z": "06d7c31d0c65ced0",
        "g": "55f07cfc0580dabd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "18acf3481670be07"
            ]
        ]
    },
    {
        "id": "18acf3481670be07",
        "type": "function",
        "z": "06d7c31d0c65ced0",
        "g": "55f07cfc0580dabd",
        "name": "function 5",
        "func": "msg.url = env.get(\"STELLIO_API_URL\");\nmsg.url += \"/ngsi-ld/v1/subscriptions/urn:ngsi-ld:Subscription:7a6c15ea-800e-47b7-aaa5-6b4d0b8167b2\";\n\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get(\"FIWARE_SERVICE\")\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 460,
        "wires": [
            [
                "c4880210854be9fe"
            ]
        ]
    },
    {
        "id": "c4880210854be9fe",
        "type": "http request",
        "z": "06d7c31d0c65ced0",
        "g": "55f07cfc0580dabd",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 460,
        "wires": [
            [
                "7e4e4fbd76f11f99"
            ]
        ]
    },
    {
        "id": "7e4e4fbd76f11f99",
        "type": "debug",
        "z": "06d7c31d0c65ced0",
        "g": "55f07cfc0580dabd",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 460,
        "wires": []
    },
    {
        "id": "e03162aa717f31b7",
        "type": "comment",
        "z": "06d7c31d0c65ced0",
        "g": "4b9d98d3b233bad0",
        "name": "Because of what Stellio does to the type used in subcriptions, the check is only checking if existing subscriptions are on a type containing a specified datamodel and not if it is equal to.",
        "info": "",
        "x": 660,
        "y": 80,
        "wires": []
    },
    {
        "id": "2e36820119375021",
        "type": "inject",
        "z": "06d7c31d0c65ced0",
        "g": "9bb62de76d856a4d",
        "name": "Go!",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "080ab472d262251c"
            ]
        ]
    },
    {
        "id": "080ab472d262251c",
        "type": "function",
        "z": "06d7c31d0c65ced0",
        "g": "9bb62de76d856a4d",
        "name": "Setup GET Request",
        "func": "msg.url = env.get(\"STELLIO_API_URL\");\nmsg.url += \"/ngsi-ld/v1/subscriptions/?limit=100\";\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get('FIWARE_SERVICE');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 340,
        "wires": [
            [
                "c75e48673f6853fc"
            ]
        ]
    },
    {
        "id": "c75e48673f6853fc",
        "type": "http request",
        "z": "06d7c31d0c65ced0",
        "g": "9bb62de76d856a4d",
        "name": "http GET Request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 340,
        "wires": [
            [
                "bdc544139ebcbdf3"
            ]
        ]
    },
    {
        "id": "bdc544139ebcbdf3",
        "type": "debug",
        "z": "06d7c31d0c65ced0",
        "g": "9bb62de76d856a4d",
        "name": "debug 61",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 340,
        "wires": []
    },
    {
        "id": "50f6c90273d64dec",
        "type": "http request",
        "z": "06d7c31d0c65ced0",
        "g": "9e2364239da5e46f",
        "name": "http POST Request",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 740,
        "wires": [
            [
                "af2b75ee75418e36"
            ]
        ]
    },
    {
        "id": "9e13e3cb6787596e",
        "type": "inject",
        "z": "06d7c31d0c65ced0",
        "g": "9e2364239da5e46f",
        "name": "Go!",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "bc522295a33c44e8"
            ]
        ]
    },
    {
        "id": "af2b75ee75418e36",
        "type": "debug",
        "z": "06d7c31d0c65ced0",
        "g": "9e2364239da5e46f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 740,
        "wires": []
    },
    {
        "id": "efc1dbde7ca33800",
        "type": "function",
        "z": "06d7c31d0c65ced0",
        "g": "9e2364239da5e46f",
        "name": "Setup Request",
        "func": "msg.url = env.get(\"STELLIO_API_URL\");\nmsg.url += \"/ngsi-ld/v1/subscriptions\";\n\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get('FIWARE_SERVICE');\n\nmsg.payload = {\n   \t\"type\": \"Subscription\",\n\t\"subscriptionName\": \"Subscription for entity type \" + msg.dataModel + \".\",\n\t\"description\": \"This subscription triggers everytime an entity from type \" + msg.dataModel + \" is updated. Only watching attribute dateObserved to avoid duplications.\",\n   \t\"entities\": [\n\t\t{\n\t\t\t\"type\": msg.dataModel\n   \t\t}\n\t],\n    \"watchedAttributes\": [\"dateObserved\"],\n\t\"notificationTrigger\": [\"entityCreated\", \"attributeCreated\", \"attributeUpdated\"],\n    \"notification\": {\n       \t\"format\": \"normalized\",\n       \t\"endpoint\": {\n\t\t\t\t  \"uri\": \"http://quantumleap-ld.prd-ngsi-stack.svc.cluster.local:8668/v2/notify\",\n          \t\"accept\": \"application/json\"\n       \t}\n    },\n    \"@context\": [\n        \"https://context.udp-kn.de/main-context.jsonld\"\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 740,
        "wires": [
            [
                "50f6c90273d64dec"
            ]
        ]
    },
    {
        "id": "2a90adb0c7c87f69",
        "type": "function",
        "z": "06d7c31d0c65ced0",
        "g": "9e2364239da5e46f",
        "name": "Check if already exists",
        "func": "msg.sub_exists = false;\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const type = msg.payload[i].entities[0].type;\n\n    if (type.includes(msg.dataModel)){\n        msg.sub_exists = true;\n        node.warn(\"There is already a subscription for this type.\")\n        break;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 620,
        "wires": [
            [
                "922ae5c915dbfef5"
            ]
        ]
    },
    {
        "id": "bc522295a33c44e8",
        "type": "function",
        "z": "06d7c31d0c65ced0",
        "g": "9e2364239da5e46f",
        "name": "Setup GET Request",
        "func": "msg.url = env.get(\"STELLIO_API_URL\");\nmsg.url += \"/ngsi-ld/v1/subscriptions/?limit=100\";\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get('FIWARE_SERVICE');\nmsg.dataModel = \"WeatherObserved\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 620,
        "wires": [
            [
                "e22b47130cab0aff"
            ]
        ]
    },
    {
        "id": "e22b47130cab0aff",
        "type": "http request",
        "z": "06d7c31d0c65ced0",
        "g": "9e2364239da5e46f",
        "name": "http GET Request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 620,
        "wires": [
            [
                "2a90adb0c7c87f69"
            ]
        ]
    },
    {
        "id": "922ae5c915dbfef5",
        "type": "switch",
        "z": "06d7c31d0c65ced0",
        "g": "9e2364239da5e46f",
        "name": "",
        "property": "sub_exists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 680,
        "wires": [
            [
                "dd05473a52b6b668"
            ],
            [
                "efc1dbde7ca33800"
            ]
        ]
    },
    {
        "id": "dd05473a52b6b668",
        "type": "debug",
        "z": "06d7c31d0c65ced0",
        "g": "9e2364239da5e46f",
        "name": "debug 83",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 680,
        "wires": []
    },
    {
        "id": "c345fc4b7d75c548",
        "type": "comment",
        "z": "06d7c31d0c65ced0",
        "g": "9e2364239da5e46f",
        "name": "Because of what Stellio does to the type used in subcriptions, the check is only checking if existing subscriptions are on a type containing a specified datamodel and not if it is equal to.",
        "info": "",
        "x": 660,
        "y": 580,
        "wires": []
    },
    {
        "id": "0f4f987967cd5ee1",
        "type": "inject",
        "z": "ebc0db16fd47daa1",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "FIWARE_SERVICE",
        "payloadType": "str",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "0993ad2062d69031"
            ]
        ]
    },
    {
        "id": "0993ad2062d69031",
        "type": "function",
        "z": "ebc0db16fd47daa1",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 60,
        "wires": [
            [
                "7fff2e2870ed2234"
            ]
        ]
    },
    {
        "id": "7fff2e2870ed2234",
        "type": "debug",
        "z": "ebc0db16fd47daa1",
        "name": "FIWARE_SERVICE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 510,
        "y": 60,
        "wires": []
    },
    {
        "id": "a21909c95741053a",
        "type": "inject",
        "z": "ebc0db16fd47daa1",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "STELLIO_API_URL",
        "payloadType": "str",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "c24f74b7f81ba39c"
            ]
        ]
    },
    {
        "id": "c24f74b7f81ba39c",
        "type": "function",
        "z": "ebc0db16fd47daa1",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 140,
        "wires": [
            [
                "c6f87505adbc0df9"
            ]
        ]
    },
    {
        "id": "c6f87505adbc0df9",
        "type": "debug",
        "z": "ebc0db16fd47daa1",
        "name": "STELLIO_API_URL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 520,
        "y": 140,
        "wires": []
    },
    {
        "id": "04372a5ba0519716",
        "type": "inject",
        "z": "ebc0db16fd47daa1",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "POSTGRES_USER",
        "payloadType": "str",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "d7b1e2128cf5250c"
            ]
        ]
    },
    {
        "id": "d7b1e2128cf5250c",
        "type": "function",
        "z": "ebc0db16fd47daa1",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 220,
        "wires": [
            [
                "d83f1df6fbf36478"
            ]
        ]
    },
    {
        "id": "d83f1df6fbf36478",
        "type": "debug",
        "z": "ebc0db16fd47daa1",
        "name": "POSTGRES_USER",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 520,
        "y": 220,
        "wires": []
    },
    {
        "id": "0c53e0b744614928",
        "type": "inject",
        "z": "ebc0db16fd47daa1",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "POSTGRES_PASS",
        "payloadType": "str",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "c752d2dade786857"
            ]
        ]
    },
    {
        "id": "c752d2dade786857",
        "type": "function",
        "z": "ebc0db16fd47daa1",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "85f3f64028d64877"
            ]
        ]
    },
    {
        "id": "85f3f64028d64877",
        "type": "debug",
        "z": "ebc0db16fd47daa1",
        "name": "POSTGRES_PASS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 510,
        "y": 300,
        "wires": []
    },
    {
        "id": "1eb0829b5dc90eee",
        "type": "inject",
        "z": "ebc0db16fd47daa1",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "WM_USERNAME",
        "payloadType": "str",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "288a4c07f05b86b8"
            ]
        ]
    },
    {
        "id": "288a4c07f05b86b8",
        "type": "function",
        "z": "ebc0db16fd47daa1",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 380,
        "wires": [
            [
                "24434421324baf32"
            ]
        ]
    },
    {
        "id": "24434421324baf32",
        "type": "debug",
        "z": "ebc0db16fd47daa1",
        "name": "WM_USERNAME",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 510,
        "y": 380,
        "wires": []
    },
    {
        "id": "2d726c7f55e1c6e2",
        "type": "inject",
        "z": "ebc0db16fd47daa1",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "WM_PASSWORD",
        "payloadType": "str",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "b470eb151bdbcdfe"
            ]
        ]
    },
    {
        "id": "b470eb151bdbcdfe",
        "type": "function",
        "z": "ebc0db16fd47daa1",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 460,
        "wires": [
            [
                "d787a8fb01a1b8f9"
            ]
        ]
    },
    {
        "id": "d787a8fb01a1b8f9",
        "type": "debug",
        "z": "ebc0db16fd47daa1",
        "name": "WM_PASSWORD",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 510,
        "y": 460,
        "wires": []
    },
    {
        "id": "16e8f5a2ef55a87e",
        "type": "inject",
        "z": "ebc0db16fd47daa1",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "TTI_PASSWORD",
        "payloadType": "str",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "903cc60be4e05a0e"
            ]
        ]
    },
    {
        "id": "903cc60be4e05a0e",
        "type": "function",
        "z": "ebc0db16fd47daa1",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 540,
        "wires": [
            [
                "023212b2809fe1f4"
            ]
        ]
    },
    {
        "id": "023212b2809fe1f4",
        "type": "debug",
        "z": "ebc0db16fd47daa1",
        "name": "TTI_PASSWORD",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 510,
        "y": 540,
        "wires": []
    }
]